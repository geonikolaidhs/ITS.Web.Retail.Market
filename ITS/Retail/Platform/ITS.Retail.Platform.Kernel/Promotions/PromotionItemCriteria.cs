using ITS.Retail.Platform.Enumerations;
using ITS.Retail.Platform.Kernel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ITS.Retail.Platform.Promotions
{
    /// <summary>
    /// Promotion criteria for the document lines' items.
    /// </summary>
    public class PromotionItemCriteria : IPromotionCriteria
    {
        /// <summary>
        /// The item to filter with.
        /// </summary>
        public Guid Item { get; protected set; }

        /// <summary>
        /// The minimum of the total quantity that the document lines of the given item must have.
        /// </summary>
        public decimal TotalQuantity { get; protected set; }

        /// <summary>
        /// The minimum of the total value that the document lines of the given item must have.
        /// </summary>
        public decimal TotalValue { get; protected set; }

        public PromotionItemCriteria(Guid item, decimal quantity, decimal value = 0)
        {
            this.Item = item;
            this.TotalQuantity = quantity;
            this.TotalValue = value;
        }

        /// <summary>
        /// Returns true if the document lines of the given item have a 
        /// total quantity or total value greater than the TotalQuantity or TotalValue properties respectively.
        /// </summary>
        /// <param name="denormalizedDocument"></param>
        /// <param name="priority"></param>
        /// <returns></returns>
        public bool MeetCriteria(List<DenormalizedDocumentDataLine> denormalizedDocument, ePromotionExecutionPriority priority)
        {
            List<DenormalizedDocumentDataLine> result = new List<DenormalizedDocumentDataLine>();
            if (this.TotalQuantity > 0) //Check for quantity 
            {
                result.AddRange(denormalizedDocument.Where(x => x.Item == this.Item && x.ItemTotalQuantity >= this.TotalQuantity));
            }
            else if (this.TotalValue > 0) // Else check for value
            {
                result.AddRange(denormalizedDocument.Where(x => x.Item == this.Item && x.ItemTotalValue >= this.TotalValue));
            }
            else
            {
                throw new Exception("Quantity and Value cannot be both 0 or less at the same time");
            }

            return result.Count > 0;
        }

        /// <summary>
        /// Gets a list of constrains that are generated by applying this criteria.
        /// The total value or total quantity of the matching lines is constrained for use in other promotions.
        /// </summary>
        /// <param name="denormalizedDocument"></param>
        /// <param name="priority"></param>
        /// <returns></returns>
        public List<IPromotionConstrain> GetConstrains(List<DenormalizedDocumentDataLine> denormalizedDocument, ePromotionExecutionPriority priority)
        {
            List<IPromotionConstrain> constrains = new List<IPromotionConstrain>();
            constrains.Add(new PromotionItemConstrain() { Item= this.Item, ItemQuantity = this.TotalQuantity, ItemValue = this.TotalValue });
            return constrains;
        }
    }
}
