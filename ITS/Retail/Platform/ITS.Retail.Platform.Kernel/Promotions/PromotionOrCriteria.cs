using ITS.Retail.Platform.Enumerations;
using ITS.Retail.Platform.Kernel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ITS.Retail.Platform.Promotions
{
    /// <summary>
    /// Combines a list of promotion criteria with the OR clause.
    /// </summary>
    public class PromotionOrCriteria : IPromotionCriteria
    {
        public List<IPromotionCriteria> CriteriaList { get; protected set; }

        public PromotionOrCriteria(params IPromotionCriteria[] criteria)
        {
            this.CriteriaList = new List<IPromotionCriteria>();
            this.CriteriaList.AddRange(criteria);
        }

        /// <summary>
        /// Returns true if the document meets any of the provided criteria.
        /// </summary>
        /// <param name="denormalizedDocument"></param>
        /// <param name="priority"></param>
        /// <returns></returns>
        public bool MeetCriteria(List<DenormalizedDocumentDataLine> denormalizedDocument, ePromotionExecutionPriority priority)
        {
            if (this.CriteriaList.Count > 0)
            {
                bool criteriaMet = this.CriteriaList.First().MeetCriteria(denormalizedDocument, priority);
                for (int i = 1; i < this.CriteriaList.Count; i++)
                {
                    bool nextCriteriaMet = this.CriteriaList[i].MeetCriteria(denormalizedDocument, priority);
                    criteriaMet = (nextCriteriaMet || criteriaMet);
                }

                return criteriaMet;
            }
            else
            {
                return false;
            }

        }

        /// <summary>
        /// Gets a combination of constrains that are generated by applying all the criteria.
        /// </summary>
        /// <param name="denormalizedDocument"></param>
        /// <param name="priority"></param>
        /// <returns></returns>
        public List<IPromotionConstrain> GetConstrains(List<DenormalizedDocumentDataLine> denormalizedDocument, ePromotionExecutionPriority priority)
        {
            if (this.CriteriaList.Count > 0)
            {
                IPromotionCriteria firstCriteria = this.CriteriaList.First();
                bool firstCriteriaMet = firstCriteria.MeetCriteria(denormalizedDocument, priority);
                List<IPromotionConstrain> result = new List<IPromotionConstrain>();
                if (firstCriteriaMet)
                {
                    result.AddRange(firstCriteria.GetConstrains(denormalizedDocument, priority));
                }

                for (int i = 1; i < this.CriteriaList.Count; i++)
                {
                    bool nextCriteriaMet = this.CriteriaList[i].MeetCriteria(denormalizedDocument, priority);
                    if (nextCriteriaMet)
                    {
                        List<IPromotionConstrain> nextResult = this.CriteriaList[i].GetConstrains(denormalizedDocument, priority);

                        foreach (IPromotionConstrain resultItem in nextResult)
                        {
                            resultItem.InsertOrUpdateToList(result);
                        }
                    }
                }

                return result;
            }
            else
            {
                return new List<IPromotionConstrain>();
            }
        }
    }
}
