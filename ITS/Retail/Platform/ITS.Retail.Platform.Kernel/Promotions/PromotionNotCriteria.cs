using ITS.Retail.Platform.Enumerations;
using ITS.Retail.Platform.Promotions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ITS.Retail.Platform.Kernel.Promotions
{
    public class PromotionNotCriteria : IPromotionCriteria
    {
        public List<IPromotionCriteria> CriteriaList { get; protected set; }

        public PromotionNotCriteria(params IPromotionCriteria[] promotionCriteria)
        {
            this.CriteriaList = new List<IPromotionCriteria>();
            this.CriteriaList.AddRange(promotionCriteria);
        }

        /// <summary>
        /// Returns true if the document meets all the criteria.
        /// </summary>
        /// <param name="denormalizedDocument"></param>
        /// <param name="priority"></param>
        /// <returns></returns>
        public bool MeetCriteria(List<DenormalizedDocumentDataLine> denormalizedDocument, ePromotionExecutionPriority priority)
        {

            //TO CHECK
            if (this.CriteriaList.Count == 1)
            {
                return !this.CriteriaList[0].MeetCriteria(denormalizedDocument, priority);                
            }
            else if (this.CriteriaList.Count > 1)
            {
                throw new ArgumentOutOfRangeException("Not criteria requires a single Rule or Group");
            }
            else
            {
                return false;
            }

        }

        /// <summary>
        /// Gets a combination of constrains that are generated by applying all the criteria.
        /// </summary>
        /// <param name="denormalizedDocument"></param>
        /// <param name="priority"></param>
        /// <returns></returns>
        public List<IPromotionConstrain> GetConstrains(List<DenormalizedDocumentDataLine> denormalizedDocument, ePromotionExecutionPriority priority)
        {
            return new List<IPromotionConstrain>();
        }
    }
}
