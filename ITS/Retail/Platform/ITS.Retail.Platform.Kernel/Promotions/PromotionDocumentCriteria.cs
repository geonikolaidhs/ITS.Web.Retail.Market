using ITS.Retail.Platform.Enumerations;
using ITS.Retail.Platform.Kernel;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


namespace ITS.Retail.Platform.Promotions
{
    /// <summary>
    /// A promotion criteria that is applied to the document's gross total before discount.
    /// </summary>
    public class PromotionDocumentCriteria : IPromotionCriteria
    {
        /// <summary>
        /// The amount to filter with.
        /// </summary>
        public decimal GrossTotalBeforeDocumentDiscount { get; protected set; }

        public bool ValueIsRepeating { get; set; }

        public PromotionDocumentCriteria(decimal grossTotalBeforeDocumentDiscount, bool valueIsRepeating)
        {
            this.GrossTotalBeforeDocumentDiscount = grossTotalBeforeDocumentDiscount;
            this.ValueIsRepeating = valueIsRepeating;
        }

        /// <summary>
        /// Returns true if the document's gross total before discount is greater or equal to the GrossTotalBeforeDocumentDiscount property.
        /// </summary>
        /// <param name="denormalizedDocument"></param>
        /// <param name="priority"></param>
        /// <returns></returns>
        public bool MeetCriteria(List<DenormalizedDocumentDataLine> denormalizedDocument, ePromotionExecutionPriority priority)
        {
            List<DenormalizedDocumentDataLine> result = new List<DenormalizedDocumentDataLine>();

            if (this.GrossTotalBeforeDocumentDiscount > 0) //Check for GrossTotalBeforeDocumentDiscount
            {
                result.AddRange(denormalizedDocument.Where(x => x.DocumentGrossTotalBeforeDocumentDiscount - (x.DocumentHeader.DocumentDetails.Where(z => z.IsTax == true || z.DoesNotAllowDiscount == true).Sum(z => z.FinalUnitPrice)) >= this.GrossTotalBeforeDocumentDiscount));
            }
            else
            {
                throw new Exception("GrossTotalBeforeDocumentDiscount cannot be 0 or less");
            }

            return result.Count > 0;
        }

        /// <summary>
        /// Gets a list of constrains that are generated by applying this criteria.
        /// Constrain the document by value if ValueIsRepeating.
        /// </summary>
        /// <param name="denormalizedDocument"></param>
        /// <param name="priority"></param>
        /// <returns></returns>
        public List<IPromotionConstrain> GetConstrains(List<DenormalizedDocumentDataLine> denormalizedDocument, ePromotionExecutionPriority priority)
        {
            List<IPromotionConstrain> constrains = new List<IPromotionConstrain>();
            if (this.ValueIsRepeating)
            {
                constrains.Add(new PromotionDocumentConstrain() { DocumentValue = this.GrossTotalBeforeDocumentDiscount });
            }

            return constrains;
        }
    }
}