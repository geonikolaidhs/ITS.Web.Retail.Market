//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ITS.Retail.Bridge.Service.BridgeWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RetailBridgeServiceSoap", Namespace="http://tempuri.org/")]
    public partial class RetailBridgeService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback PostFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrdersOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RetailBridgeService() {
            this.Url = global::ITS.Retail.Bridge.Service.Properties.Settings.Default.Retail_Bridge_Service_BridgeWebService_RetailBridgeService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event PostFileCompletedEventHandler PostFileCompleted;
        
        /// <remarks/>
        public event GetOrdersCompletedEventHandler GetOrdersCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PostFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PostFile(
                    FileType fileType, 
                    string compressedFileContents, 
                    string fileName, 
                    string encoding, 
                    System.Guid agendOid, 
                    string email, 
                    string md5, 
                    bool createUsersForCustomers, 
                    bool createUsersForStores, 
                    string customerUserRoleDescription, 
                    string storeUserRoleDescription, 
                    string locale, 
                    string ownerTaxCode, 
                    bool multipleCategoryTrees, 
                    string rootCategoryCode, 
                    bool makeZeroPricesUserDefinable, 
                    bool sendEmailsForImagesOnlyOnError, 
                    bool oneStorePerCustomer) {
            object[] results = this.Invoke("PostFile", new object[] {
                        fileType,
                        compressedFileContents,
                        fileName,
                        encoding,
                        agendOid,
                        email,
                        md5,
                        createUsersForCustomers,
                        createUsersForStores,
                        customerUserRoleDescription,
                        storeUserRoleDescription,
                        locale,
                        ownerTaxCode,
                        multipleCategoryTrees,
                        rootCategoryCode,
                        makeZeroPricesUserDefinable,
                        sendEmailsForImagesOnlyOnError,
                        oneStorePerCustomer});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PostFileAsync(
                    FileType fileType, 
                    string compressedFileContents, 
                    string fileName, 
                    string encoding, 
                    System.Guid agendOid, 
                    string email, 
                    string md5, 
                    bool createUsersForCustomers, 
                    bool createUsersForStores, 
                    string customerUserRoleDescription, 
                    string storeUserRoleDescription, 
                    string locale, 
                    string ownerTaxCode, 
                    bool multipleCategoryTrees, 
                    string rootCategoryCode, 
                    bool makeZeroPricesUserDefinable, 
                    bool sendEmailsForImagesOnlyOnError, 
                    bool oneStorePerCustomer) {
            this.PostFileAsync(fileType, compressedFileContents, fileName, encoding, agendOid, email, md5, createUsersForCustomers, createUsersForStores, customerUserRoleDescription, storeUserRoleDescription, locale, ownerTaxCode, multipleCategoryTrees, rootCategoryCode, makeZeroPricesUserDefinable, sendEmailsForImagesOnlyOnError, oneStorePerCustomer, null);
        }
        
        /// <remarks/>
        public void PostFileAsync(
                    FileType fileType, 
                    string compressedFileContents, 
                    string fileName, 
                    string encoding, 
                    System.Guid agendOid, 
                    string email, 
                    string md5, 
                    bool createUsersForCustomers, 
                    bool createUsersForStores, 
                    string customerUserRoleDescription, 
                    string storeUserRoleDescription, 
                    string locale, 
                    string ownerTaxCode, 
                    bool multipleCategoryTrees, 
                    string rootCategoryCode, 
                    bool makeZeroPricesUserDefinable, 
                    bool sendEmailsForImagesOnlyOnError, 
                    bool oneStorePerCustomer, 
                    object userState) {
            if ((this.PostFileOperationCompleted == null)) {
                this.PostFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPostFileOperationCompleted);
            }
            this.InvokeAsync("PostFile", new object[] {
                        fileType,
                        compressedFileContents,
                        fileName,
                        encoding,
                        agendOid,
                        email,
                        md5,
                        createUsersForCustomers,
                        createUsersForStores,
                        customerUserRoleDescription,
                        storeUserRoleDescription,
                        locale,
                        ownerTaxCode,
                        multipleCategoryTrees,
                        rootCategoryCode,
                        makeZeroPricesUserDefinable,
                        sendEmailsForImagesOnlyOnError,
                        oneStorePerCustomer}, this.PostFileOperationCompleted, userState);
        }
        
        private void OnPostFileOperationCompleted(object arg) {
            if ((this.PostFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PostFileCompleted(this, new PostFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOrders", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetOrders(string username, string password, string storeCode, long versionDateTicks, out long latestVersionTicks) {
            object[] results = this.Invoke("GetOrders", new object[] {
                        username,
                        password,
                        storeCode,
                        versionDateTicks});
            latestVersionTicks = ((long)(results[1]));
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrdersAsync(string username, string password, string storeCode, long versionDateTicks) {
            this.GetOrdersAsync(username, password, storeCode, versionDateTicks, null);
        }
        
        /// <remarks/>
        public void GetOrdersAsync(string username, string password, string storeCode, long versionDateTicks, object userState) {
            if ((this.GetOrdersOperationCompleted == null)) {
                this.GetOrdersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrdersOperationCompleted);
            }
            this.InvokeAsync("GetOrders", new object[] {
                        username,
                        password,
                        storeCode,
                        versionDateTicks}, this.GetOrdersOperationCompleted, userState);
        }
        
        private void OnGetOrdersOperationCompleted(object arg) {
            if ((this.GetOrdersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrdersCompleted(this, new GetOrdersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.3190.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum FileType {
        
        /// <remarks/>
        TEXT,
        
        /// <remarks/>
        IMAGE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void PostFileCompletedEventHandler(object sender, PostFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PostFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PostFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void GetOrdersCompletedEventHandler(object sender, GetOrdersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrdersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrdersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long latestVersionTicks {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591