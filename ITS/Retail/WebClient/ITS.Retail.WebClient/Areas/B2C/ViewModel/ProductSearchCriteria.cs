using DevExpress.Data.Filtering;
using DevExpress.Xpo;
using ITS.Retail.Model;
using ITS.Retail.WebClient.Helpers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using ITS.Retail.ResourcesLib;
using ITS.Retail.Common.ViewModel;
using ITS.Retail.Common;

namespace ITS.Retail.WebClient.Areas.B2C.ViewModel
{
    public class ProductSearchCriteria : BaseSearchFilter
    {        
        public Guid? CategoryID { get; set; }

        [Binding("header_RadioButtonList")]
        public int? RadioButtonListValue { get; set; }

        [Binding("header_RadioButtonDateList")]
        public int? RadioButtonDateListValue { get; set; }

        [Binding("header_FilterDate")]
        public DateTime? FilterDate { get; set; }

        [Binding("header_searchText")]
        public String SearchText { get; set; }

        //Autogenerated criteria
        [CriteriaField("Item.InsertedDate", OperatorType = CustomBinaryOperatorType.GreaterOrEqual)]
        public DateTime? LeftSearchDate
        {
            get
            {
                return FilterDate.HasValue ? (DateTime?)FilterDate.Value.Date : null;
            }
        }

        //Autogenerated criteria
        [CriteriaField("Item.InsertedDate", OperatorType= CustomBinaryOperatorType.LessOrEqual)]
        public DateTime? RightSearchDate
        {
            get
            {
                if (FilterDate.HasValue == false || RadioButtonDateListValue.HasValue == false) 
                {
                    return null;
                }
                return ((RadioButtonDateListValue.Value == 1) ? FilterDate.Value.Date : DateTime.Now.Date).AddDays(1).AddMilliseconds(-1);
            }
        }

        public String ItemName
        {
            get
            {
                return (RadioButtonListValue.HasValue && RadioButtonListValue.Value> 0 ) ? SearchText : "";
            }
        }

        public String Barcode
        {
            get
            {
                return (RadioButtonListValue.HasValue && RadioButtonListValue.Value != 1 ) ? SearchText : "";
            }
        }

        //Autogenerated criteria
        [CriteriaField("Item.Owner.Oid")]
        public Guid Owner { get; set; }

        //Custom Criteria
        public Guid PriceCatalog { get; set; }

        //Pagination variables
        public int? Page { get; set; }

        public int? TotalPages { get; set; }

        public int? TotalResults { get; set; }

        //Autogenerated criteria
        [CriteriaField("IsActive")]
        public bool IsActive { get; set; }

        public UnitOfWork XpoSession { get; set; }

        public string CategoryDescription { get; set; }

        public bool ForceXPCollection { get; set; }

        //non autogenerated criteria 
        protected override List<CriteriaOperator> BuildExtraCriteria()
        {
            if (SearchText != null)
            {
                SearchText = SearchText.Replace('*', '%');
            }
            List<CriteriaOperator> extra = new List<CriteriaOperator>();// { new BinaryOperator("DatabaseValue", 0,BinaryOperatorType.Greater) };
            PriceCatalog pc = XpoSession.GetObjectByKey<PriceCatalog>(this.PriceCatalog);
            extra.Add(PriceCatalogHelper.GetTreePriceCatalogDetailsFilter(pc, null));
            if(this.CategoryID.HasValue)
            {
                ItemCategory category = XpoSession.GetObjectByKey<ItemCategory>(this.CategoryID.Value);
                if (category != null)
                {
                    CriteriaOperator categoryGetAllNodeTreeFilter = category.GetAllNodeTreeFilter("Item.ItemAnalyticTrees");
                    int count = new Regex(" or ").Matches(categoryGetAllNodeTreeFilter.ToString().ToLower()).Count;
                    ForceXPCollection = count > 2000;
                    extra.Add(categoryGetAllNodeTreeFilter);

                    CategoryDescription = category.Description;
                }
            }
            List<CriteriaOperator> orCriteria = new List<CriteriaOperator>();
            if(String.IsNullOrWhiteSpace(this.Barcode)==false)
            {
                orCriteria.Add(new ContainsOperator("Item.ItemBarcodes", new BinaryOperator("Barcode.Code", this.Barcode.Replace('*', '%'), BinaryOperatorType.Like)));
            }
            if (String.IsNullOrWhiteSpace(this.ItemName) == false)
            {
                orCriteria.Add(new BinaryOperator("Item.Name", 
                    this.ItemName.Contains('%')?this.ItemName:string.Format("%{0}%",this.ItemName),
                    BinaryOperatorType.Like));
            }
            extra.Add(CriteriaOperator.Or(orCriteria));
            return extra;
        }

        public Dictionary<string,string> StringSearchCriteria()
        {
            Dictionary<string, string> searchCriteria = new Dictionary<string, string>();

            if( !string.IsNullOrEmpty(ItemName))
            {
                searchCriteria.Add(Resources.Description, ItemName);
            }
            if( !string.IsNullOrEmpty(Barcode))
            {
                searchCriteria.Add(Resources.Barcode, Barcode);
            }

            if (LeftSearchDate != null)
            {
                searchCriteria.Add(Resources.From, LeftSearchDate.ToString());
            }

            if (RightSearchDate != null)
            {
                searchCriteria.Add(Resources.To, ((DateTime)RightSearchDate).ToString("dd/MM/yyyy"));
            }
            else
            {
                searchCriteria.Add(Resources.To, DateTime.Now.ToString("dd/MM/yyyy"));
            }

            return searchCriteria;
        }
    }
}