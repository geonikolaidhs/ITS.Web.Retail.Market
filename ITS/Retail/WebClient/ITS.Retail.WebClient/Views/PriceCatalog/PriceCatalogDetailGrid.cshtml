@using ITS.Retail.ResourcesLib;
@using ITS.Retail.WebClient.Helpers;
@using System.Web.UI.WebControls;


@Html.DevExpress().GridView(settings =>
{
    bool editMode = false;

    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
    settings.SettingsPager.AlwaysShowPager = true;
    settings.AccessibilityCompliant = true;
    string gridName = "";
    if (ViewData["EditMode"] != null && bool.Parse(ViewData["EditMode"].ToString()) == true && ITS.Retail.WebClient.MvcApplication.ApplicationInstanceAllowsPriceEdit )
    {
        editMode = true;
        settings.Name = "grdPriceCatalogDetails";
        settings.Columns.Add(column =>
        {
            column.Caption = "#";
            column.SetDataItemTemplateContent(c =>
            {
                ViewContext.Writer.Write("<a href='javascript:;' onclick=\"" + settings.Name + ".SetFocusedRowIndex('" + c.ItemIndex.ToString() + "');" + settings.Name + ".StartEditRow('" + c.ItemIndex.ToString() + "');\" title=\"Επεξεργασία\"><img src='" + Url.Content("~/Content/img/edit.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Edit + "\" /></a>");

                if (ITS.Retail.WebClient.MvcApplication.ApplicationInstance != eApplicationInstance.STORE_CONTROLER)
                {
                    ViewContext.Writer.Write("<a href='javascript:;' onclick=\"" + settings.Name + ".SetFocusedRowIndex('" + c.ItemIndex.ToString() + "');" + settings.Name + ".DeleteRow('" + c.ItemIndex.ToString() + "');\" title=\"Διαγραφή\"><img src='" + Url.Content("~/Content/img/del.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Delete + "\" /></a>");
                }

            });
            if (ITS.Retail.WebClient.MvcApplication.ApplicationInstance != eApplicationInstance.STORE_CONTROLER)
            {
                column.SetHeaderTemplateContent(c =>
                {
                    ViewContext.Writer.Write("<a href='javascript:;' onclick=\"" + settings.Name + ".AddNewRow();\"><img src='" + Url.Content("~/Content/img/plus.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Add + "\" /></a>");
                });
            }
            column.Settings.AllowDragDrop = DefaultBoolean.False;
            column.Settings.AllowSort = DefaultBoolean.False;
        });

        settings.CallbackRouteValues = new { Controller = "PriceCatalog", Action = "PriceCatalogDetailGrid", editMode = true };
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "PriceCatalog", Action = "PriceCatalogDetailInlineEditingAddNewPartial" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "PriceCatalog", Action = "PriceCatalogDetailInlineEditingUpdatePartial" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "PriceCatalog", Action = "PriceCatalogDetailInlineEditingDeletePartial" };
        settings.ClientSideEvents.BeginCallback = "OnBeginCallbackPriceCatalogDetailGrid";
        gridName = "grdPriceCatalogDetailEdit";
    }
    else
    {
        settings.Name = "grdPriceCatalogDetails";
        if ((bool)ViewData["TableCanExport"])
        {
            settings.Columns.Add(column =>
            {
                column.Caption = "#";
                column.SetHeaderTemplateContent(c =>
                {
                    ViewContext.Writer.Write("<a href='" + Url.Action("ExportPriceCatalogDetail", "PriceCatalog", new { PCOid = ViewData["PriceCatalogID"] }) + "' onclick='' target='_blank' title=\"" + Resources.Print + "\"><img src='" + Url.Content("~/Content/img/print.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Print + "\" /></a>");
                });
                column.Settings.AllowDragDrop = DefaultBoolean.False;
                column.Settings.AllowSort = DefaultBoolean.False;
            });
        }
        settings.CallbackRouteValues = new { Controller = "PriceCatalog", Action = "PriceCatalogDetailGrid", PriceCatalogID = ViewData["PriceCatalogID"], editMode = false, TabPage = ViewData["TabPage"] };
        settings.ClientSideEvents.BeginCallback = "OnBeginCallbackPriceCatalogDetailGrid";
        gridName = "grdPriceCatalogDetailView";
    }

    settings.SettingsBehavior.EnableCustomizationWindow = true;
    settings.ClientSideEvents.ContextMenu = "CustomizationWindowBtn_Click";
    settings.HtmlRowPrepared = (object sender, ASPxGridViewTableRowEventArgs e) =>
    {
        if (e.RowType == GridViewRowType.Data)
            e.Row.Attributes.Remove("oncontextmenu");
    };

    settings.CustomColumnDisplayText = (object sender, ASPxGridViewColumnDisplayTextEventArgs e) =>     //TrimStart sta columns pou theloume
    {
        if (BaseController.OwnerApplicationSettings != null && BaseController.OwnerApplicationSettings.PadItemCodes
            && BaseController.OwnerApplicationSettings.TrimBarcodeOnDisplay)
        {
            if (e.Column.FieldName == "Item.Code")
            {

                string s = e.Value as string;
                if (s == null)
                {
                    return;
                }
                e.DisplayText = s.TrimStart(BaseController.OwnerApplicationSettings.ItemCodePaddingCharacter[0]);
            }
        }
    };

    settings.Columns.Add(col =>
    {
        col.FieldName = "Item.Code";
        col.Caption = Resources.Code;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "Barcode.Code";
        col.Caption = Resources.Barcode;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "Item.Name";
        col.Caption = Resources.ItemName;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "Item.Buyer.Description";
        col.Caption = Resources.Buyer;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "Item.DefaultSupplier.CompanyName";
        col.Caption = Resources.ItemSupplier;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "CreatedOn";
        col.Caption = Resources.InsertedDate;
        col.ColumnType = MVCxGridViewColumnType.DateEdit;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "UpdatedOn";
        col.Caption = Resources.UpdatedOn;
        col.ColumnType = MVCxGridViewColumnType.DateEdit;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "Item.Seasonality.Description";
        col.Caption = Resources.Seasonality;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "Item.MotherCode.Code";
        col.Caption = Resources.MotherCode;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });
    settings.Columns.Add(col =>
    {
        col.PropertiesEdit.DisplayFormatString = BaseController.OwnerApplicationSettings.formatCurrencyString;
        col.FieldName = "DatabaseValue";
        col.Caption = Resources.Value;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.CellStyle.HorizontalAlign = HorizontalAlign.Right;
    });



    settings.Columns.Add(col =>
    {
        col.FieldName = "Discount";
        col.Caption = Resources.Discount;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.PropertiesEdit.DisplayFormatString = "0.00%";
        col.CellStyle.HorizontalAlign = HorizontalAlign.Left;
    });
    settings.Columns.Add(col =>
    {
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        col.FieldName = "VATIncluded";
        col.Caption = Resources.VatIncluded;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.CellStyle.HorizontalAlign = HorizontalAlign.Left;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "MarkUp";
        col.Caption = Resources.MarkUp;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.PropertiesEdit.DisplayFormatString = "0.00%";
        col.CellStyle.HorizontalAlign = HorizontalAlign.Left;
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "IsActive";
        column.Caption = Resources.IsActive;
        column.HeaderStyle.Wrap = DefaultBoolean.True;
        column.ColumnType = MVCxGridViewColumnType.CheckBox;
        CheckBoxProperties checkBoxProperties = column.PropertiesEdit as CheckBoxProperties;
        checkBoxProperties.ValueChecked = true;
        checkBoxProperties.ValueGrayed = false;
        checkBoxProperties.ValueUnchecked = false;
        checkBoxProperties.ValueType = typeof(bool);
        column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });

    settings.SetDetailRowTemplateContent(c =>
    {
        Html.RenderAction("PriceCatalogDetailTimeValueGrid", new { PriceCatalogDetailOid = DataBinder.Eval(c.DataItem, "Oid"), EditMode = editMode });
    });
    settings.SettingsDetail.AllowOnlyOneMasterRowExpanded = false;
    settings.SettingsDetail.ShowDetailRow = true;
    settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.NextColumn;
    settings.SettingsBehavior.EnableRowHotTrack = true;
    settings.Settings.ShowFilterRow = true;
    settings.Settings.ShowFilterRowMenu = true;
    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Auto;
    settings.Settings.ShowFooter = true;
    settings.Settings.ShowGroupPanel = true;
    settings.Settings.ShowHeaderFilterButton = true;
    settings.KeyFieldName = "Oid";
    settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
    settings.SettingsPopup.EditForm.Modal = true;
    settings.SettingsPopup.EditForm.ShowHeader = true;
    settings.StylesPopup.EditForm.Header.Font.Bold = true;
    settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;
    settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
    settings.SettingsText.PopupEditFormCaption = Resources.EditPriceCatalogDetail;
    settings.SettingsBehavior.ConfirmDelete = true;
    settings.CommandColumn.Visible = false;
    settings.CommandColumn.ShowNewButton = true;
    settings.CommandColumn.ShowUpdateButton = true;
    settings.CommandColumn.ShowDeleteButton = true;
    settings.CommandColumn.ShowEditButton = true;
    settings.KeyboardSupport = false;
    settings.CommandColumn.Width = 50;
    settings.SettingsPager.PageSize = 15;
    settings.SettingsCookies.Enabled = false;
    settings.SettingsCookies.StoreColumnsVisiblePosition = true;
    settings.SettingsCookies.StoreColumnsWidth = true;
    settings.SettingsCookies.StoreFiltering = false;
    settings.SettingsCookies.StorePaging = true;
    settings.Settings.ShowTitlePanel = true;
    settings.SettingsText.Title = Resources.ItemsOfPriceCatalog;

    settings.SettingsText.PopupEditFormCaption = Resources.Prices;

    settings.Settings.GridLines = System.Web.UI.WebControls.GridLines.Vertical;
    settings.Styles.Header.HorizontalAlign = HorizontalAlign.Center;

    settings.SettingsPager.EnableAdaptivity = true;
    settings.SettingsPager.Position = PagerPosition.TopAndBottom;

    settings.ClientLayout += (sndr, evt) =>
    {
        User user = (User)ViewBag.CurrentUser;
        if (user != null)
        {
            if (evt.LayoutMode == ClientLayoutMode.Loading)
            {
                GridSettings sets = user.GridSettings.FirstOrDefault(x => x.GridName == gridName);
                if (sets != null)
                {
                    evt.LayoutData = sets.GridLayout;
                }
            }
            else
            {
                BaseController.UpdateUserGridSettings(user.Oid, gridName, evt.LayoutData);
            }
        }
    };

    settings.SetEditFormTemplateContent(editContent =>
    {
        var item = @ViewBag.CurrentItem != null ? @ViewBag.CurrentItem : editContent.DataItem;

        ViewContext.Writer.Write("<div class='ValidationContainer'>");
        /*Header banner*/
        HeaderOptions headerOptions = new HeaderOptions("");
        headerOptions.SaveButton.Name = "btnPriceCatalogDetailUpdate";
        headerOptions.SaveButton.OnClick = "function(s, e){ValidateForm(s,e," + settings.Name + ");}";
        headerOptions.CancelButton.Name = "btnPriceCatalogDetailCancel";
        headerOptions.CancelButton.OnClick = "function(s, e){ " + settings.Name + ".CancelEdit(); }";
        headerOptions.ViewType = eViewType.PopUp;
        HtmlGenerator.CreateViewHeader(Html, ViewData, headerOptions, true);
        /*End of header banner*/

        ViewContext.Writer.Write("<table><tr><td class=\"vertical-align-td-top\" >");
        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label required_field";
            edtSettings.Text = Resources.Item + ":";
            edtSettings.AssociatedControlName = "Item";
        }).Render();
        ViewData["Item"] = item;

        Html.RenderPartial("BarcodesComboBoxPartial", ViewData["Item"]);

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label required_field";
            edtSettings.Text = Resources.Value + ":";
            edtSettings.AssociatedControlName = "DatabaseValue";
        }).Render();

        Html.DevExpress().SpinEdit(edtSettings =>
        {
            edtSettings.Name = "DatabaseValue";
            edtSettings.ControlStyle.CssClass = "editor";
            edtSettings.Properties.MinValue = 0;
            edtSettings.Properties.MaxValue = 99999;
            edtSettings.Properties.MaxLength = 99999;
            edtSettings.Number = 0;
            edtSettings.ShowModelErrors = true;
            edtSettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            edtSettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS;
            edtSettings.Properties.DisplayFormatString = BaseController.OwnerApplicationSettings.formatCurrencyString;
            edtSettings.ControlStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Right;
        }).Bind(DataBinder.Eval(item, "DatabaseValue") ?? 0).Render();

        ViewContext.Writer.Write("</td><td class=\"vertical-align-td-top\">");

        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label required_field";
            edtSettings.Text = Resources.Discount + ":";
            edtSettings.AssociatedControlName = "Discount";
        }).Render();

        Html.DevExpress().TextBox(edtSettings =>
        {
            edtSettings.Name = "Discount";
            edtSettings.ControlStyle.CssClass = "editor";
            edtSettings.ShowModelErrors = true;
            edtSettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            edtSettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS;
            edtSettings.Properties.MaskSettings.Mask = "<0..999>.<0..999>%";
            edtSettings.Properties.DisplayFormatInEditMode = true;
            edtSettings.Properties.MaskSettings.IncludeLiterals = MaskIncludeLiteralsMode.DecimalSymbol;
            edtSettings.Width = Unit.Percentage(100);
        }).Bind((DataBinder.Eval(item, "Discount")) == null ? "" : (DataBinder.Eval(item, "Discount")) * 100).Render();

        ViewContext.Writer.Write("</td></tr><tr><td class=\"vertical-align-td-top\">");
        Html.DevExpress().TextBox(edtSettings =>
        {
            edtSettings.Properties.Caption = Resources.MarkUp;
            edtSettings.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
            edtSettings.Name = "MarkUp";
            edtSettings.ControlStyle.CssClass = "editor";
            edtSettings.ShowModelErrors = true;
            edtSettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            edtSettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS;
            edtSettings.Properties.MaskSettings.Mask = "<0..999>.<0..999>%";
            edtSettings.Properties.DisplayFormatInEditMode = true;
            edtSettings.Properties.MaskSettings.IncludeLiterals = MaskIncludeLiteralsMode.DecimalSymbol;
            edtSettings.Width = Unit.Percentage(100);
        }).Bind((DataBinder.Eval(item, "MarkUp")) == null ? "" : (DataBinder.Eval(item, "MarkUp")) * 100).Render();
        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().CheckBox(edtSettings =>
        {
            edtSettings.Name = "VatIncludedCheckbox";
            edtSettings.Text = Resources.VatIncluded + ":";
            edtSettings.Properties.ValueChecked = true;
            edtSettings.Properties.ValueGrayed = false;
            edtSettings.Properties.ValueUnchecked = false;
            edtSettings.Properties.ValueType = typeof(bool);
            edtSettings.ShowModelErrors = true;
            edtSettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            edtSettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS;
        }).Bind(DataBinder.Eval(item, "VATIncluded") ?? false).Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().CheckBox(edtSettings =>
        {
            edtSettings.Name = "IsActiveValue";
            edtSettings.Text = Resources.ActiveFemale;
            edtSettings.ControlStyle.CssClass = "editor";
            edtSettings.Properties.ValueChecked = true;
            edtSettings.Properties.ValueGrayed = false;
            edtSettings.Properties.ValueUnchecked = false;
            edtSettings.Properties.ValueType = typeof(bool);
        }).Bind(DataBinder.Eval(item, "IsActive")).Render();

        ViewContext.Writer.Write("</td></tr></table>");
        ViewContext.Writer.Write("</div>");
    });
}).Bind(Model).GetHtml()
