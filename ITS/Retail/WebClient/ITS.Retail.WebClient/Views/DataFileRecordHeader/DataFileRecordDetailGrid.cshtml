@model IEnumerable<ITS.Retail.Model.DataFileRecordDetail>
@using ITS.Retail.ResourcesLib;
@Html.DevExpress().GridView(settings =>
{
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
    settings.SettingsBehavior.EnableCustomizationWindow = true;
    settings.Settings.GridLines = System.Web.UI.WebControls.GridLines.Vertical;
    settings.Styles.Header.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
    settings.ClientSideEvents.ContextMenu = "CustomizationWindowBtn_Click";

    settings.SettingsPager.EnableAdaptivity = true;
    settings.HtmlRowPrepared = (object sender, ASPxGridViewTableRowEventArgs e) =>
    {
        if (e.RowType == GridViewRowType.Data)
        {
            e.Row.Attributes.Remove("oncontextmenu");
        }
    };

    if (ViewData["EditMode"] != null && bool.Parse(ViewData["EditMode"].ToString()) == true)
    {
        settings.Name = "grdDataFileRecordDetails";

        settings.Columns.Add(column =>
        {
            column.Caption = "#";
            column.SetDataItemTemplateContent(c =>
            {
                ViewContext.Writer.Write(
                    "<a href='javascript:;' onclick=\"" + settings.Name + ".SetFocusedRowIndex('" + c.ItemIndex.ToString() + "');" + settings.Name + ".StartEditRow('" + c.ItemIndex.ToString() + "');\" title=\"" + Resources.Edit + "\"><img src='" + Url.Content("~/Content/img/edit.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Edit + "\" /></a>" +
                    "<a href='javascript:;' onclick=\"" + settings.Name + ".SetFocusedRowIndex('" + c.ItemIndex.ToString() + "');" + settings.Name + ".DeleteRow('" + c.ItemIndex.ToString() + "');\" title=\"" + Resources.Delete + "\"><img src='" + Url.Content("~/Content/img/del.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Delete + "\" /></a>"
                );

            });
            column.SetHeaderTemplateContent(c =>
            {
                ViewContext.Writer.Write(
                    "<a href='javascript:;' onclick=\"" + settings.Name + ".AddNewRow();\"><img src='" + Url.Content("~/Content/img/plus.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Add + "\" /></a>"
                );
            });

            column.Settings.AllowDragDrop = DefaultBoolean.False;
            column.Settings.AllowSort = DefaultBoolean.False;
            column.Width = 70;
        });
        settings.CallbackRouteValues = new { Controller = "DataFileRecordHeader", Action = "DataFileRecordDetailGrid", editMode = true };
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "DataFileRecordHeader", Action = "InsertDataFileRecordDetail" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "DataFileRecordHeader", Action = "UpdateDataFileRecordDetail" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "DataFileRecordHeader", Action = "DeleteDataFileRecordDetail" };
        settings.ClientSideEvents.BeginCallback = "OnBeginCallbackDataFileRecordDetailGrid";
        settings.ClientSideEvents.EndCallback = "OnEndCallbackDataFileRecordDetailGrid";
    }
    else
    {

        settings.Name = "grdDataFileRecordDetails" + ViewData["DataFileRecordHeaderID"];
        settings.CallbackRouteValues = new { Controller = "DataFileRecordHeader", Action = "DataFileRecordDetailGrid", OfferID = ViewData["DataFileRecordHeaderID"], editMode = false };

    }

    settings.Columns.Add(col =>
    {
        col.FieldName = "PropertyName";
        col.Caption = Resources.PropertyName;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "Position";
        col.Caption = Resources.Position;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "DefaultValue";
        col.Caption = Resources.DefaultValue;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "Padding";
        col.Caption = Resources.Padding;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "AllowNull";
        col.Caption = Resources.AllowNullFields;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "PaddingCharacter";
        col.Caption = Resources.PaddingCharacter;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "Length";
        col.Caption = Resources.Length;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "ConstantValue";
        col.Caption = Resources.ConstantValue;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "Multiplier";
        col.Caption = Resources.Multiplier;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "Trim";
        col.Caption = Resources.Trim;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "UseThirdPartNum";
        col.Caption = Resources.UseThirdPartNum;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });

    settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.NextColumn;
    settings.SettingsBehavior.EnableRowHotTrack = true;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Settings.ShowFilterRow = true;
    settings.Settings.ShowFilterRowMenu = true;
    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Auto;
    settings.Settings.ShowFooter = true;
    settings.Settings.ShowGroupPanel = false;
    settings.Settings.ShowHeaderFilterButton = true;
    settings.KeyFieldName = "Oid";
    settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
    settings.SettingsPopup.EditForm.Width = System.Web.UI.WebControls.Unit.Percentage(60);
    settings.SettingsPopup.EditForm.Modal = true;
    settings.SettingsPopup.EditForm.ShowHeader = true;
    settings.StylesPopup.EditForm.Header.Font.Bold = true;
    settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;
    settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
    settings.SettingsText.PopupEditFormCaption = Resources.ItemInfo;
    settings.SettingsBehavior.ConfirmDelete = true;
    settings.CommandColumn.Visible = false;
    settings.CommandColumn.ShowNewButton = true;
    settings.CommandColumn.ShowUpdateButton = true;
    settings.CommandColumn.ShowDeleteButton = true;
    settings.CommandColumn.ShowEditButton = true;
    settings.KeyboardSupport = false;
    settings.CommandColumn.Caption = Resources.Options;
    settings.CommandColumn.Width = 150;
    settings.SettingsPager.PageSize = 15;
    settings.SettingsCookies.Enabled = false;
    settings.SettingsCookies.StoreColumnsVisiblePosition = true;
    settings.SettingsCookies.StoreColumnsWidth = true;
    settings.SettingsCookies.StoreFiltering = false;
    settings.SettingsCookies.StorePaging = true;
    settings.Settings.ShowTitlePanel = true;
    settings.SettingsText.Title = Resources.Fields;

    settings.SettingsText.PopupEditFormCaption = Resources.EditDataFileRecordHeader;
    settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.TopAndBottom;

    string gridName = "";

    if (ViewData["EditMode"] != null && bool.Parse(ViewData["EditMode"].ToString()) == true)
    {
        gridName = "grdDataFileRecordDetailsEdit";
    }
    else
    {
        gridName = "grdDataFileRecordDetailsView";
    }

    settings.ClientLayout += (sndr, evt) =>
    {
        User user = (User)ViewBag.CurrentUser;
        if (user != null)
        {
            if (evt.LayoutMode == ClientLayoutMode.Loading)
            {
                GridSettings sets = user.GridSettings.FirstOrDefault(x => x.GridName == gridName);
                if (sets != null)
                {
                    evt.LayoutData = sets.GridLayout;
                }
            }
            else
            {
                BaseController.UpdateUserGridSettings(user.Oid, gridName, evt.LayoutData);
            }
        }
    };


    settings.SetEditFormTemplateContent(editContent =>
    {

        var item = @ViewBag.CurrentItem != null ? @ViewBag.CurrentItem : editContent.DataItem;

        ViewContext.Writer.Write("<div class='ValidationContainer'>");
        /*Header banner*/
        HeaderOptions headerOptions = new HeaderOptions("");
        headerOptions.SaveButton.Name = "btnDataFileRecordDetailUpdate";
        headerOptions.SaveButton.OnClick = "function(s, e){ValidateForm(s,e," + settings.Name + ");}";
        headerOptions.CancelButton.Name = "btnDataFileRecordDetailCancel";
        headerOptions.CancelButton.OnClick = "function(s, e){ " + settings.Name + ".CancelEdit(); }";
        headerOptions.ViewType = eViewType.PopUp;
        HtmlGenerator.CreateViewHeader(Html, ViewData, headerOptions, true);
        /*End of header banner*/

        ViewContext.Writer.Write("<table><tr><td class=\"vertical-align-td-top\" >");
        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label required_field";
            edtSettings.Text = Resources.PropertyName + ":";
        }).Render();

        ViewData["item"] = item;
        Html.RenderPartial("PropertyNameComboBox");

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().Label(
        edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label required_field";
            edtSettings.Text = Resources.Position + ":";
        }).Render();

        Html.DevExpress().SpinEdit(
          edtSettings =>
          {
              edtSettings.Name = "DetailPosition";
              edtSettings.ControlStyle.CssClass = "editor";
              edtSettings.Properties.MinValue = 0;
              edtSettings.Properties.MaxValue = 99999;
              edtSettings.Properties.MaxLength = 99999;
              edtSettings.Number = 0;
              edtSettings.ShowModelErrors = true;
              edtSettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
              edtSettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS;
          }
      )
      .Bind(DataBinder.Eval(item, "Position"))
      .Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().CheckBox(edtSettings =>
        {
            edtSettings.Name = "PaddingCheckBox";
            edtSettings.Text = Resources.Padding;
            edtSettings.ControlStyle.CssClass = "editor padding-top-25";
            edtSettings.Properties.ValueChecked = true;
            edtSettings.Properties.ValueGrayed = false;
            edtSettings.Properties.ValueUnchecked = false;
            edtSettings.Properties.ValueType = typeof(bool);
        }).Bind(DataBinder.Eval(item, "Padding")).Render();



        ViewContext.Writer.Write("</td></tr><tr><td class=\"vertical-align-td-top\">");
        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label";
            edtSettings.Text = Resources.DefaultValue + ":";
        }).Render();

        Html.DevExpress().TextBox(edtSettings =>
        {
            edtSettings.Name = "DefaultValue";
            edtSettings.ControlStyle.CssClass = "editor";
        }).Bind(DataBinder.Eval(item, "DefaultValue"))
        .Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().Label(
        edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label required_field";
            edtSettings.Text = Resources.Length + ":";
        }).Render();

        Html.DevExpress().SpinEdit(
          edtSettings =>
          {
              edtSettings.Name = "DetailLength";
              edtSettings.ControlStyle.CssClass = "editor";
              edtSettings.Properties.MinValue = 0;
              edtSettings.Properties.MaxValue = 99999;
              edtSettings.Properties.MaxLength = 99999;
              edtSettings.Properties.NumberType = SpinEditNumberType.Integer;
              edtSettings.Number = 0;
              edtSettings.ShowModelErrors = true;
              edtSettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
              edtSettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS;
          }
      )
      .Bind(DataBinder.Eval(item, "Length"))
      .Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().CheckBox(edtSettings =>
        {
            edtSettings.Name = "TrimCheckBox";
            edtSettings.Text = Resources.Trim ;
            edtSettings.ControlStyle.CssClass = "editor padding-top-25";
            edtSettings.Properties.ValueChecked = true;
            edtSettings.Properties.ValueGrayed = false;
            edtSettings.Properties.ValueUnchecked = false;
            edtSettings.Properties.ValueType = typeof(bool);
        }).Bind(DataBinder.Eval(item, "Trim")).Render();


        ViewContext.Writer.Write("</td></tr><tr><td class=\"vertical-align-td-top\">");
        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label";
            edtSettings.Text = Resources.ConstantValue + ":";
        }).Render();

        Html.DevExpress().TextBox(edtSettings =>
        {
            edtSettings.Name = "ConstantValue";
            edtSettings.ControlStyle.CssClass = "editor";
        }).Bind(DataBinder.Eval(item, "ConstantValue"))
        .Render();


        ViewContext.Writer.Write("</td><td  class=\"vertical-align-td-top\">");
        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label";
            edtSettings.Text = Resources.Multiplier + ":";
        }).Render();
        Html.DevExpress().SpinEdit(edtSettings =>
        {
            edtSettings.Name = "MultiplierSpinEdit";
            edtSettings.ControlStyle.CssClass = "editor";
            edtSettings.Properties.MinValue = -9999999999;
            edtSettings.Properties.MaxValue = 9999999999;
            edtSettings.Properties.NumberType = SpinEditNumberType.Float;
            edtSettings.Number = 0;
        }).Bind(DataBinder.Eval(item, "Multiplier"))
        .Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().CheckBox(edtSettings =>
        {
            edtSettings.Name = "AllowNullCheckBox";
            edtSettings.Text = Resources.AllowNullFields;
            edtSettings.ControlStyle.CssClass = "editor padding-top-25";
            edtSettings.Properties.ValueChecked = true;
            edtSettings.Properties.ValueGrayed = false;
            edtSettings.Properties.ValueUnchecked = false;
            edtSettings.Properties.ValueType = typeof(bool);
        }).Bind(DataBinder.Eval(item, "AllowNull")).Render();

        ViewContext.Writer.Write("</td></tr><tr><td  class=\"vertical-align-td-top\">");
        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label";
            edtSettings.Text = Resources.PaddingCharacter + ":";
        }).Render();

        Html.DevExpress().TextBox(edtSettings =>
        {
            edtSettings.Name = "PaddingCharacter";
            edtSettings.ControlStyle.CssClass = "editor";
        }).Bind(DataBinder.Eval(item, "PaddingCharacter"))
        .Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().CheckBox(edtSettings =>
        {
            edtSettings.Name = "UseThirdPartNumCheckBox";
            edtSettings.Text = Resources.UseThirdPartNum;
            edtSettings.ControlStyle.CssClass = "editor padding-top-25";
            edtSettings.Properties.ValueChecked = true;
            edtSettings.Properties.ValueGrayed = false;
            edtSettings.Properties.ValueUnchecked = false;
            edtSettings.Properties.ValueType = typeof(bool);
        }).Bind(DataBinder.Eval(item, "UseThirdPartNum")).Render();

        ViewContext.Writer.Write("</td><td></td><td></td></tr></table>");
        ViewContext.Writer.Write("</div>");
    });

}).Bind(Model).GetHtml()
