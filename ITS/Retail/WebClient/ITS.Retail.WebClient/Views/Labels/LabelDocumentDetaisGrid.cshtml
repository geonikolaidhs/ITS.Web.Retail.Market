@using ITS.Retail.ResourcesLib;
@using System.Web.UI.WebControls;

@Html.DevExpress().GridView(settings =>
{
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "15", "30", "50" };
    settings.AccessibilityCompliant = true;
    settings.SettingsBehavior.EnableCustomizationWindow = true;
    settings.Name = "grdLabelDocumentDetails" + ViewBag.DocumentOid.ToString().Replace("-","_");
    settings.CallbackRouteValues = new { Controller = "Labels", Action = "LabelDocumentDetaisGrid", editMode = true, DocumentOid = ViewBag.DocumentOid };       
    settings.CommandColumn.ShowSelectCheckbox = true;
    
    settings.SettingsBehavior.AllowSelectByRowClick = false;
    settings.CommandColumn.Visible = true;
    settings.CommandColumn.SetHeaderTemplateContent(c =>
    {
        Html.DevExpress().CheckBox(settingsCheckBox =>
        {
            settingsCheckBox.Name = "cbSelectAll" + ViewBag.DocumentOid.ToString().Replace("-", "_");

            settingsCheckBox.ClientVisible = c.Grid.VisibleRowCount > 0;
            settingsCheckBox.Properties.ClientSideEvents.CheckedChanged = "function(s, e) { if(s.GetChecked()) " + settings.Name + ".SelectRows(); else " + settings.Name + ".UnselectRows(); }";
            settingsCheckBox.Checked = IsAllSelectedGridView(c.Grid);
            settingsCheckBox.Checked = c.Grid.VisibleRowCount == c.Grid.Selection.Count;          
        }).Render();
    });

    settings.CommandColumn.CellStyle.CssClass = "firstCollumn";
    settings.CommandColumn.Width = 25;
    settings.CommandColumn.CellStyle.HorizontalAlign = HorizontalAlign.Center;
    settings.CommandColumn.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;

    settings.CustomJSProperties += (s, e) =>
    {
        e.Properties["cpVisibleRowCount"] = (s as MVCxGridView).VisibleRowCount;
        e.Properties["cpDocumentOid"] = ViewBag.DocumentOid.ToString().Replace("-", "_");
    };

    settings.Columns.Add(col =>
    {
        col.FieldName = "DocumentDetail.LineNumber";
        col.Caption = Resources.LineNumber;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });
    
    settings.Columns.Add(col =>
    {
        col.FieldName = "PriceCatalogDetail.Item.Code";
        col.Caption = Resources.Code;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "DocumentDetail.Barcode.Code";
        col.Caption = Resources.Barcode;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "PriceCatalogDetail.Item.Name";
        col.Caption = Resources.Item;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "PriceCatalogDetail.RetailValue";
        col.Caption = Resources.NewPrice;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.PropertiesEdit.DisplayFormatString = BaseController.OwnerApplicationSettings.formatCurrencyString;
        col.CellStyle.HorizontalAlign = HorizontalAlign.Right;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "PriceCatalogDetail.OldRetailValue";
        col.Caption = Resources.OldPrice;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.PropertiesEdit.DisplayFormatString = BaseController.OwnerApplicationSettings.formatCurrencyString;
        col.CellStyle.HorizontalAlign = HorizontalAlign.Right;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "PriceCatalogDetail.ValueChangedOnDate";
        col.Caption = Resources.PriceChangedOn;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });

    settings.Columns.Add(col =>
    {
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        col.Caption = Resources.LabelPrinted;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.SetDataItemTemplateContent(c =>
        {
            var lastprintdate = DataBinder.Eval(c.DataItem, "PriceCatalogDetail.LabelPrintedOnDate");
            var lastchangedate = DataBinder.Eval(c.DataItem, "PriceCatalogDetail.ValueChangedOnDate");
            if (lastprintdate != null && (DateTime)lastprintdate > (DateTime)lastchangedate)
            {
                ViewContext.Writer.Write(true);
            }
            else
            {
                ViewContext.Writer.Write(false);
            }
        });
    });

    settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.NextColumn;
    settings.SettingsBehavior.EnableRowHotTrack = true;
    settings.Width = Unit.Percentage(100);
    settings.Settings.ShowFilterRow = false;
    settings.Settings.ShowFilterRowMenu = false;
    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Hidden;
    settings.Settings.ShowFooter = true;
    settings.Settings.ShowGroupPanel = false;
    settings.Settings.ShowHeaderFilterButton = false;
    settings.KeyFieldName = "Oid";
    settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
    settings.SettingsPopup.EditForm.Height = Unit.Percentage(80);
    settings.SettingsPopup.EditForm.Width = Unit.Percentage(60);
    settings.SettingsPopup.EditForm.Modal = true;
    settings.SettingsPopup.EditForm.ShowHeader = true;
    settings.StylesPopup.EditForm.Header.Font.Bold = true;
    settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;
    settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
    settings.SettingsText.PopupEditFormCaption = Resources.PriceInfo;

    settings.SettingsBehavior.ConfirmDelete = true;
    settings.CommandColumn.Visible = true;
    settings.KeyboardSupport = false;
    settings.SettingsPager.PageSize = 15;
    settings.SettingsCookies.Enabled = false;
    settings.SettingsCookies.StoreColumnsVisiblePosition = true;
    settings.SettingsCookies.StoreColumnsWidth = true;
    settings.SettingsCookies.StoreFiltering = false;
    settings.SettingsCookies.StorePaging = true;
    
    settings.Settings.ShowTitlePanel = true;
    settings.SettingsText.Title = Resources.Labels;

    settings.ClientSideEvents.SelectionChanged = "LabelsSelectionChanged";

    settings.ClientLayout += (sndr, evt) =>
    {
        User user = (User)ViewBag.CurrentUser;
        if (user != null)
        {
            if (evt.LayoutMode == ClientLayoutMode.Loading)
            {
                GridSettings sets = user.GridSettings.FirstOrDefault(x => x.GridName == "grdLabelDocumentDetails");
                if (sets != null)
                {
                    evt.LayoutData = sets.GridLayout;
                }
            }
            else
            {
                BaseController.UpdateUserGridSettings(user.Oid, "grdLabelDocumentDetails", evt.LayoutData);
            }
        }
    };

    settings.SettingsPager.EnableAdaptivity = true;
    settings.SettingsPager.Position = PagerPosition.TopAndBottom;

}).Bind(Model).GetHtml()

@functions{
    bool IsAllSelectedGridView(ASPxGridView gridView)
    {

        for (var i = 0; i < gridView.VisibleRowCount; i++)
        {
            if (!gridView.Selection.IsRowSelected(i))
            {
                return false;
            }
        }
        return true;
    }
}