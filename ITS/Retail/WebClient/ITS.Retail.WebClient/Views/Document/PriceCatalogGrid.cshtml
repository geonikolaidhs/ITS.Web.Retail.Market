@using ITS.Retail.ResourcesLib;
@using ITS.Retail.Model;
@using ITS.Retail.WebClient.Extensions;
@using ITS.Retail.WebClient.Controllers;
@model IEnumerable<PriceCatalog>

@{
    var excluded = new List<string>() {"ParentCatalogOid", "Owner","IsDefault", "IsRoot", "Level"};
    var settings = HtmlGridExtension.GetDefaultSettings(ViewContext, typeof(PriceCatalog), typeof(DocumentController), "grdPriceCatalog", showAddIcon: false, showEditIcon: false, showDeleteIcon: false, excludeFields: excluded);
    settings.SettingsText.Title = Resources.PriceCatalog;
    settings.CallbackRouteValues = new { Controller = "Document", Action = "PriceCatalogGrid" };
    settings.ClientSideEvents.SelectionChanged = "SelectionChanged";

    settings.SettingsPager.EnableAdaptivity = true;

    settings.ClientLayout += (sndr, evt) =>
    {
        User user = (User)ViewBag.CurrentUser;
        if (user != null)
        {
            if (evt.LayoutMode == ClientLayoutMode.Loading)
            {
                GridSettings sets = user.GridSettings.FirstOrDefault(x => x.GridName == settings.Name);
                if (sets != null)
                {
                    evt.LayoutData = sets.GridLayout;
                }
            }
            else
            {
                BaseController.UpdateUserGridSettings(user.Oid, settings.Name, evt.LayoutData);
            }
        }
    };
    if (ViewBag.HidePopup != null && ViewBag.HidePopup)
    {
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.None;
    }
    
}

@Html.DevExpress().GridView(settings).Bind(Model).GetHtml()