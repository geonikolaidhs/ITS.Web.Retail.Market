@model DocumentDetail
@using System.Web.UI.WebControls;
@using ITS.Retail.ResourcesLib;
@using ITS.Retail.Model;

@{
    Html.DevExpress().CallbackPanel(settings =>
    {            
        settings.Name = "itemPanel";
        settings.ControlStyle.CssClass = "documentDetailForm";
        settings.CallbackRouteValues = new { Controller = "Document", Action = "DocumentDetailAdvancedSales" };
        settings.ClientSideEvents.Init = "itemPanelInitialization";
        settings.ClientSideEvents.BeginCallback = "itemPanelBeginCallback";
        DocumentHeader documentHeader = ViewData["currentDocument"] != null ? (DocumentHeader)ViewData["currentDocument"] : (DocumentHeader)Session["currentDocument"];
        PriceCatalogDetail priceCatalogDetail = ViewData["currentpriceCatalogDetail"] != null ? (PriceCatalogDetail)ViewData["currentpriceCatalogDetail"] : Session["currentpriceCatalogDetail"] as PriceCatalogDetail;
        DocumentDetail docdet = Model;
        OwnerApplicationSettings ownerAppSettings = documentHeader.Owner.OwnerApplicationSettings;
        bool freezeEdit = false;
        if(docdet != null)
        {
            freezeEdit = (documentHeader.TransformationLevel == eTransformationLevel.FREEZE_EDIT || docdet.IsLinkedLine || docdet.IsCanceled);
        }
        
        bool EditMode = ViewBag.DocumentDetailFormMode == "Edit";
        bool AddMode = ViewBag.DocumentDetailFormMode == "Add";
        bool StartAddMode = ViewBag.DocumentDetailFormMode == "StartAdd";
        bool HiddenMode = ViewBag.DocumentDetailFormMode == "Hidden";

        bool editMode = (EditMode || AddMode) && !freezeEdit;
        
        if (!ViewBag.InViewMode)
        {
            settings.ClientSideEvents.EndCallback = "itemPanelEndCallback";
        }
        settings.SettingsLoadingPanel.Enabled = false;

        settings.SetContent(() =>
        {
             
            bool isOrder = ViewBag.IsOrder == null ? false : (bool)ViewBag.IsOrder;

            bool AcceptsCustomPrice = ViewData["currentDocument"] != null
                                      ? false
                                      : (UserHelper.IsCustomer(ViewBag.CurrentUser) == false
                                            && (docdet == null || docdet.Item == null ? false : docdet.Item.AcceptsCustomPrice)
                                         );

            bool AcceptsCustomDescription = ViewData["currentDocument"] != null
                                      ? false
                                      : (UserHelper.IsCustomer(ViewBag.CurrentUser) == false
                                            && (docdet == null || docdet.Item == null ? false : docdet.Item.AcceptsCustomDescription)
                                        );

            bool IsWholeSale = documentHeader.DocumentType == null
                                ? false
                                : documentHeader.DocumentType.IsForWholesale;

            bool docTypeIsDefined = documentHeader != null && documentHeader.DocumentType != null;

            ViewContext.Writer.Write("<div class='upinfo'>");

            ViewContext.Writer.Write("<input type='hidden' value='" + ViewBag.DocumentDetailFormMode + "' id='DocumentDetailFormMode' />");

                       
            @Html.DevExpress().CheckBox(cbx_settings =>
            {
                cbx_settings.Name = "checkNewItem";
                cbx_settings.Text = Resources.Auto + " " + Resources.NewRecord;
                cbx_settings.ControlStyle.CssClass = "editor checkbox-item-advanced";
                cbx_settings.Enabled = editMode || StartAddMode;
                cbx_settings.Checked = ViewBag.checkbox != null ? ViewBag.checkbox : true;
                cbx_settings.Properties.ValueGrayed = false;
                cbx_settings.Properties.ValueUnchecked = false;
                cbx_settings.Properties.ValueType = typeof(bool);
                cbx_settings.ControlStyle.ForeColor = System.Drawing.Color.Black;
            }).Render();
                        
            Html.DevExpress().Image(btnSettings =>
            {
                btnSettings.Name = "btnPreviousItem";
                btnSettings.ImageUrl = "~/Content/img/arrow-previous-small.png?ver=" + ViewData["ApplicationVersionNumber"];
                btnSettings.ToolTip = Resources.Previous + " " + Resources.Item;
                btnSettings.ControlStyle.CssClass = "Upbutton left";
                btnSettings.Enabled = (docdet != null && EditMode && ViewBag.previousOid != null);
                btnSettings.ClientEnabled = EditMode;
                btnSettings.Properties.ClientSideEvents.Click = "function(s,e){ChangeItem(s,e,'" + ViewBag.previousOid + "')}";
            }).Render();

            Html.DevExpress().Image(btnSettings =>
            {
                btnSettings.Name = "btnNextItem";
                btnSettings.ImageUrl = "~/Content/img/arrow-next-small.png?ver=" + ViewData["ApplicationVersionNumber"];
                btnSettings.ToolTip = Resources.Next + " " + Resources.Item;
                btnSettings.ControlStyle.CssClass = "Upbutton right";
                btnSettings.Enabled = (docdet != null && EditMode && ViewBag.nextOid != null);
                btnSettings.ClientEnabled = EditMode;
                btnSettings.Properties.ClientSideEvents.Click = "function(s,e){ChangeItem(s,e,'" + ViewBag.nextOid + "')}";
            }).Render();                     

            @Html.DevExpress().Button(s =>
            {
                s.Name = "btnSaveItem";
                s.Text = Resources.Save;
                s.ToolTip = Resources.Save + " (Ctrl + Enter)";
                s.ControlStyle.CssClass = "button-font-size-12";
                s.Enabled = (docdet != null && (EditMode || AddMode) && !freezeEdit);
                    s.ClientSideEvents.Click = "UpdateItem";
            }).GetHtml();

            @Html.DevExpress().Button(s =>
            {
                s.Name = "btnSaveCloseItem";
                s.Text = Resources.SaveAndCloseExcerpt;
                s.ToolTip = Resources.SaveAndClose;
                s.ControlStyle.CssClass = "button-font-size-12";

                s.Enabled = (docdet != null && (EditMode || AddMode) && !freezeEdit);
                    s.ClientSideEvents.Click = "UpdateItem";
            }).GetHtml();
       
            @Html.DevExpress().Button(s =>
            {
                s.Name = "btnRecalculateItem";
                s.Text = Resources.Recalculate;
                s.ToolTip = Resources.Recalculate;
                s.ControlStyle.CssClass = "button-font-size-11";
                s.ClientSideEvents.Click = "RecalculateDocumentDetail";
                s.Enabled = (docdet != null && (EditMode || AddMode) && !freezeEdit);
            }).GetHtml();
       
            @Html.DevExpress().Button(s =>
            {
                s.Name = "btnCancelItem";
                s.Text = Resources.Close;
                s.ToolTip = Resources.Close;
                s.ClientSideEvents.Click = "CancelItem";
                s.ControlStyle.CssClass = "button-font-size-12";
            }).GetHtml();
           
            if (!HiddenMode)
            {
                ViewContext.Writer.Write("<div class=\"total\"><label>" + Resources.TotalSort + "</label>");
                string final_sum = (docdet == null ? 0 : docdet.GrossTotal).ToString() + " €";
                @Html.DevExpress().Label(final_sum_settings =>
                {
                    final_sum_settings.Name = "final_sum";
                    final_sum_settings.Enabled = true;
                    final_sum_settings.ClientEnabled = false;
                    final_sum_settings.Properties.DisplayFormatString = ownerAppSettings.formatCurrencyString;
                    final_sum_settings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                }).Bind(final_sum).GetHtml();
                ViewContext.Writer.Write("</div>");
            }
            ViewContext.Writer.Write("</div>");

            Html.RenderPartial("SearchByBarcode");
            Html.RenderPartial("SearchByDescription");           

            if (!HiddenMode)
            {
                string itemCode = docdet == null || docdet.Item == null ? "" : docdet.Item.Code;
                if (itemCode != null && priceCatalogDetail != null && ownerAppSettings.PadItemCodes)
                {
                    itemCode = itemCode.TrimStart(ownerAppSettings.ItemCodePaddingCharacter[0]);
                }

                ViewContext.Writer.Write("<div class='floated'>");
                ViewContext.Writer.Write("<label>" + Resources.Code + "</label>");

                ViewContext.Writer.Write(Html.Hidden("hidden_quantity", docdet == null ? "" : docdet.PackingQuantity.ToString().Replace(",", ".")));
                @Html.DevExpress().TextBox(txtbxsetings =>
                {
                    txtbxsetings.Name = "item_info_code";
                    txtbxsetings.ControlStyle.CssClass = "textOnly";
                    txtbxsetings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    txtbxsetings.ReadOnly = true;
                    txtbxsetings.Width = Unit.Percentage(100);
                    txtbxsetings.ClientEnabled = false;

                }).Bind(itemCode).GetHtml();
                ViewContext.Writer.Write("</div>");

                ViewContext.Writer.Write("<div class='floated'>");
                ViewContext.Writer.Write("<label>" + Resources.Barcode + "</label>");
                @Html.DevExpress().TextBox(txtbxsetings =>
                {
                    txtbxsetings.Name = "item_info_barcode";
                    txtbxsetings.ControlStyle.CssClass = "textOnly";
                    txtbxsetings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    txtbxsetings.Enabled = true;
                    txtbxsetings.Width = Unit.Percentage(100);
                    txtbxsetings.ReadOnly = true;
                    txtbxsetings.ClientEnabled = false;
                    txtbxsetings.ControlStyle.ForeColor = System.Drawing.Color.Black;
                }).Bind(docdet == null || docdet.Barcode == null ? "" : docdet.Barcode.Code).GetHtml();
                ViewContext.Writer.Write("</div>");

                ViewContext.Writer.Write("<div class='floated item_info_name'>");
                ViewContext.Writer.Write("<label>" + Resources.Description + "</label>");

                @Html.DevExpress().TextBox(txtbxsetings =>
                {
                    txtbxsetings.Name = "item_info_name";
                    txtbxsetings.Enabled = true;
                    txtbxsetings.Width = Unit.Percentage(100);
                    txtbxsetings.ReadOnly = !AcceptsCustomDescription || isOrder;
                    txtbxsetings.ClientEnabled = !(txtbxsetings.ReadOnly);
                    if (AcceptsCustomDescription && !isOrder)
                    {
                        txtbxsetings.Properties.ClientSideEvents.KeyPress = "GetItemInfoOnEnterPressed";
                    }
                    else
                    {
                        txtbxsetings.ControlStyle.CssClass = "textOnly";
                    }
                    txtbxsetings.ControlStyle.ForeColor = System.Drawing.Color.Black;
                }).Bind(docdet == null ? "" : docdet.CustomDescription).GetHtml();
                ViewContext.Writer.Write("</div>");

                ViewContext.Writer.Write("<div class='floated'><label>" + Resources.Quantity + "</label>");

                bool DecimalEnabled = false;
                if (docdet != null && docdet.PackingMeasurementUnit != null)
                {
                    DecimalEnabled = docdet.PackingMeasurementUnit.SupportDecimal;
                }
                
                Html.DevExpress().SpinEdit(txt_settings =>
                {
                    txt_settings.Name = "spinlineqty";
                    txt_settings.Width = Unit.Percentage(100);
                    txt_settings.Properties.ClientSideEvents.KeyPress = "GetItemInfoOnEnterPressed";
                    txt_settings.Enabled = editMode;
                    txt_settings.Properties.SpinButtons.Visible = false;
                    txt_settings.Properties.SpinButtons.ShowIncrementButtons = false;
                    txt_settings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
                    txt_settings.Properties.Increment = 1M;
                    txt_settings.Properties.LargeIncrement = 5M;
                    txt_settings.Properties.MinValue = 0M;
                    txt_settings.Properties.MaxValue = documentHeader.DocumentType.MaxDetailValue;
                    txt_settings.Properties.AllowMouseWheel = false;
                    
                    if(DecimalEnabled)
                    {
                        txt_settings.Properties.NumberType = SpinEditNumberType.Float;
                    }
                    else
                    {
                        txt_settings.Properties.NumberType = SpinEditNumberType.Integer;
                    }
                    txt_settings.Properties.SpinButtons.ShowIncrementButtons = false;
                    txt_settings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
                }).Bind(docdet == null ? 1 : docdet.PackingQuantity).GetHtml();
                ViewContext.Writer.Write("</div>");

                ViewContext.Writer.Write("<div class='floated'>");

                @Html.DevExpress().Label(lbl_settings =>
                {
                    lbl_settings.Name = "MeasurementUnitLabel";
                    lbl_settings.Text = documentHeader.UsesPackingQuantities ? Resources.MeasurementUnits : Resources.MeasurementUnit;
                    lbl_settings.Width = Unit.Percentage(100);
                    lbl_settings.ControlStyle.CssClass = "label";
                }).GetHtml();

                string customMeasurementUnit = docdet == null ? "" : docdet.CustomMeasurementUnit;
                if(documentHeader.UsesPackingQuantities && docdet!=null)
                {
                    customMeasurementUnit = docdet.MeasurementUnitsQuantities;
                    if(string.IsNullOrEmpty(customMeasurementUnit))
                    {
                        customMeasurementUnit = docdet.CustomMeasurementUnit;
                    }
                }
                
                @Html.DevExpress().TextBox(txtbxsetings =>
                {
                    txtbxsetings.Name = "CustomMeasurementUnit";
                    txtbxsetings.ControlStyle.CssClass = "textOnly";
                    txtbxsetings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    txtbxsetings.Enabled = true;
                    txtbxsetings.Width = Unit.Percentage(100);
                    txtbxsetings.ReadOnly = true;
                    txtbxsetings.ClientEnabled = false;
                    txtbxsetings.ControlStyle.ForeColor = System.Drawing.Color.Black;
                }).Bind(customMeasurementUnit).GetHtml();
                                
                ViewContext.Writer.Write("</div>");

                ViewContext.Writer.Write("<div class='floated'>");
                ViewContext.Writer.Write("<label>" + Resources.VatCategory + "(%): " + "</label>");

                @Html.DevExpress().SpinEdit(fpasettings =>
                {
                    fpasettings.Name = "fpa_factor";
                    fpasettings.ControlStyle.CssClass = "textOnly";
                    fpasettings.Enabled = true;
                    fpasettings.ReadOnly = true;
                    fpasettings.Width = Unit.Percentage(100);
                    fpasettings.ClientEnabled = false;
                    fpasettings.Properties.NumberType = SpinEditNumberType.Float;
                    fpasettings.Properties.DisplayFormatString = "#0.00 %";
                    fpasettings.Properties.DecimalPlaces = 2;
                    fpasettings.ControlStyle.ForeColor = System.Drawing.Color.Black;
                    fpasettings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    fpasettings.Properties.SpinButtons.Visible = false;
                    fpasettings.Properties.SpinButtons.ShowIncrementButtons = false;
                    fpasettings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
                    fpasettings.Properties.Increment = 0;
                    fpasettings.Properties.LargeIncrement = 0;

                }).Bind(docdet == null ? null : (double?)(docdet.VatFactor)).GetHtml();
                ViewContext.Writer.Write("</div>");

                ViewContext.Writer.Write("<div class='floated custom_price'>");
                ViewContext.Writer.Write("<label>" + Resources.UnitPrice + "</label>");

                @Html.DevExpress().SpinEdit(txt_settings =>
                {
                    txt_settings.Name = "custom_price";
                    txt_settings.ClientEnabled = editMode;
                    txt_settings.Width = Unit.Percentage(100);
                    txt_settings.Properties.ClientSideEvents.KeyPress = "GetItemInfoOnEnterPressed";
                    txt_settings.ControlStyle.ForeColor = System.Drawing.Color.Black;
                    txt_settings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    txt_settings.Properties.SpinButtons.Enabled = false;
                    txt_settings.Enabled = editMode && (!isOrder || documentHeader.DocumentType.AllowItemValueEdit);
                    txt_settings.Properties.NumberType = SpinEditNumberType.Float;
                    txt_settings.Properties.NumberFormat = SpinEditNumberFormat.Custom;
                    txt_settings.Properties.DisplayFormatString = ownerAppSettings.formatItemValueString;
                    txt_settings.Properties.SpinButtons.Visible = false;
                    txt_settings.Properties.SpinButtons.ShowIncrementButtons = false;
                    txt_settings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
                    txt_settings.Properties.AllowMouseWheel = false;
                    txt_settings.ClientEnabled = AcceptsCustomPrice || documentHeader.DocumentType.AllowItemValueEdit;
                    txt_settings.ControlStyle.CssClass = !AcceptsCustomPrice ? "textOnly" : "";
                }).Bind(docdet != null ? docdet.CustomUnitPrice.ToString() : "").GetHtml();
                ViewContext.Writer.Write("</div>");

                ViewContext.Writer.Write("<div class='floated'><label>" + Resources.Points + "</label>");
                @Html.DevExpress().TextBox(totalpointssettings =>
                {
                    totalpointssettings.Name = "points";
                    totalpointssettings.Enabled = true;
                    totalpointssettings.ControlStyle.CssClass = "textOnly";
                    totalpointssettings.ReadOnly = true;
                    totalpointssettings.Width = Unit.Percentage(100);
                    totalpointssettings.ClientEnabled = true;
                    totalpointssettings.ControlStyle.ForeColor = System.Drawing.Color.Black;
                    totalpointssettings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                }).Bind(docdet == null ? 0 : (int?)docdet.Points).GetHtml();
                ViewContext.Writer.Write("</div>");

                decimal totalCost = docdet != null ? (documentHeader.DocumentType.IsForWholesale ? docdet.NetTotalBeforeDiscount : docdet.GrossTotalBeforeDiscount) : 0;
                ViewContext.Writer.Write("<div class='floated'><label>" + Resources.NetTotal + "</label>");
                @Html.DevExpress().TextBox(totalcostsettings =>
                {
                    totalcostsettings.Name = "total_cost";
                    totalcostsettings.Enabled = true;
                    totalcostsettings.ControlStyle.CssClass = "textOnly";
                    totalcostsettings.ReadOnly = true;
                    totalcostsettings.Width = Unit.Percentage(100);
                    totalcostsettings.ClientEnabled = false;
                    totalcostsettings.ControlStyle.ForeColor = System.Drawing.Color.Black;
                    totalcostsettings.Properties.DisplayFormatString = ownerAppSettings.formatCurrencyString;
                    totalcostsettings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                }).Bind(totalCost).GetHtml();
                ViewContext.Writer.Write("</div>");

                @*Discount elements*@

ViewContext.Writer.Write("<div class='floated'>");
ViewContext.Writer.Write("<label>" + Resources.PriceCatalogDiscount + " %</label>");

@Html.DevExpress().SpinEdit(totaldiscountsettings =>
{
    totaldiscountsettings.Name = "price_catalog_discount_percentage";
    totaldiscountsettings.Enabled = true;
    totaldiscountsettings.ReadOnly = true;
    totaldiscountsettings.ControlStyle.CssClass = "textOnly";
    totaldiscountsettings.Width = Unit.Percentage(100);
    totaldiscountsettings.ClientEnabled = false;
    totaldiscountsettings.Properties.SpinButtons.Visible = false;
    totaldiscountsettings.Properties.SpinButtons.ShowIncrementButtons = false;
    totaldiscountsettings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
    totaldiscountsettings.Properties.Increment = 0;
    totaldiscountsettings.Properties.LargeIncrement = 0;
    totaldiscountsettings.ControlStyle.ForeColor = System.Drawing.Color.Black;
    totaldiscountsettings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
    totaldiscountsettings.Properties.DecimalPlaces = 2;
}).Bind(priceCatalogDetail == null ? null : (double?)(100*priceCatalogDetail.Discount)).GetHtml();

ViewContext.Writer.Write("</div>");


ViewContext.Writer.Write("<div class='floated'>");
ViewContext.Writer.Write("<label>" + Resources.PriceCatalogDiscount + " €</label>");

decimal priceCatalogDiscountValue = 0;
if (docdet != null && priceCatalogDetail != null)
{
    priceCatalogDiscountValue = docdet.Qty * docdet.CustomUnitPrice * priceCatalogDetail.Discount;
}

@Html.DevExpress().SpinEdit(totaldiscountsettings =>
{
    totaldiscountsettings.Name = "price_catalog_discount_value";
    totaldiscountsettings.Enabled = true;
    totaldiscountsettings.ControlStyle.CssClass = "textOnly";
    totaldiscountsettings.ReadOnly = true;
    totaldiscountsettings.Width = Unit.Percentage(100);
    totaldiscountsettings.ClientEnabled = false;
    totaldiscountsettings.ControlStyle.ForeColor = System.Drawing.Color.Black;
    totaldiscountsettings.Properties.SpinButtons.Visible = false;
    totaldiscountsettings.Properties.SpinButtons.ShowIncrementButtons = false;
    totaldiscountsettings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
    totaldiscountsettings.Properties.NumberFormat = SpinEditNumberFormat.Currency;
    totaldiscountsettings.Properties.DisplayFormatString = ownerAppSettings.formatCurrencyString;
    totaldiscountsettings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
    totaldiscountsettings.Properties.Increment = 0;
    totaldiscountsettings.Properties.LargeIncrement = 0;
    totaldiscountsettings.Properties.DecimalPlaces = 2;
}).Bind(docdet == null ? null : (double?)priceCatalogDiscountValue).GetHtml();

ViewContext.Writer.Write("</div>");
ViewContext.Writer.Write("<div class='floated'>");
ViewContext.Writer.Write("<label>" + Resources.DocumentLineDiscount + " % </label>");

decimal userDiscountPercentage = 0;

if (docdet != null)
{
    if (documentHeader.DocumentType.IsForWholesale)
    {
        userDiscountPercentage = docdet.CustomDiscountsPercentageWholeSale;
    }
    else
    {
        userDiscountPercentage = docdet.CustomDiscountsPercentageRetail;
    }
}

ViewContext.Writer.Write(Html.Hidden("userDiscount", userDiscountPercentage*100, new { id = "userDiscount" }));
ViewContext.Writer.Write(Html.Hidden("isPercentage", "true", new { id = "isPercentage" }));


@Html.DevExpress().SpinEdit(txt_settings =>
{
    txt_settings.ClientEnabled =
    txt_settings.Enabled = (Session["currentDocumentDetail"] as DocumentDetail) != null && (Session["currentDocumentDetail"] as DocumentDetail).Item != null && !(Session["currentDocumentDetail"] as DocumentDetail).DoesNotAllowDiscount;
    txt_settings.Name = "userDiscountPercentage";
    txt_settings.Width = Unit.Percentage(100);
    txt_settings.Properties.ClientSideEvents.KeyPress = "GetItemInfoOnEnterPressed";
    txt_settings.Properties.ClientSideEvents.ValueChanged = "RefreshUserHiddenInputs";
    txt_settings.Enabled = editMode && !isOrder;
    txt_settings.Properties.NumberType = SpinEditNumberType.Float;
    txt_settings.Properties.SpinButtons.Visible = false;
    txt_settings.Properties.SpinButtons.ShowIncrementButtons = false;
    txt_settings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
    txt_settings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
    txt_settings.Properties.Increment = 0.01M;
    txt_settings.Properties.DecimalPlaces = 2;
    txt_settings.Properties.AllowMouseWheel = false;
    txt_settings.Properties.DisplayFormatInEditMode = true;
}).Bind((double?)(userDiscountPercentage *100)).GetHtml();

ViewContext.Writer.Write("</div>");
ViewContext.Writer.Write("<div class='floated'>");
ViewContext.Writer.Write("<label>" + Resources.DocumentLineDiscount + "(€): </label>");

@Html.DevExpress().SpinEdit(txt_settings =>
{
    txt_settings.ClientEnabled =
    txt_settings.Enabled = (Session["currentDocumentDetail"] as DocumentDetail) != null && (Session["currentDocumentDetail"] as DocumentDetail).Item != null && !(Session["currentDocumentDetail"] as DocumentDetail).DoesNotAllowDiscount;
    txt_settings.Name = "userDiscountMoneyValue";
    txt_settings.Width = Unit.Percentage(100);
    txt_settings.Properties.ClientSideEvents.KeyPress = "GetItemInfoOnEnterPressed";
    txt_settings.Properties.ClientSideEvents.ValueChanged = "RefreshUserHiddenInputs";
    txt_settings.Enabled = editMode && !isOrder;
    txt_settings.Properties.NumberType = SpinEditNumberType.Float;
    txt_settings.Properties.NumberFormat = SpinEditNumberFormat.Custom;
    txt_settings.Properties.DisplayFormatString = ownerAppSettings.formatCurrencyString;
    //txt_settings.Properties.DecimalPlaces = (int)ownerAppSettings.DisplayDigits;
    txt_settings.Properties.SpinButtons.Visible = false;
    txt_settings.Properties.SpinButtons.ShowIncrementButtons = false;
    txt_settings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
    txt_settings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
    txt_settings.Properties.Increment = 0;
    txt_settings.Properties.LargeIncrement = 0;
    txt_settings.Properties.AllowMouseWheel = false;
}).Bind(docdet == null ? null : (double?)docdet.CustomDiscountsAmount).GetHtml();

ViewContext.Writer.Write("</div>");
                @* END OF Discount elements   *@

                decimal totalDiscountPercentage = 0; ;
                if (docdet != null)
                {
                    if (documentHeader.DocumentType.IsForWholesale)
                    {
                        totalDiscountPercentage = docdet.TotalDiscountPercentage;
                    }

                    else
                    {
                        totalDiscountPercentage = docdet.TotalDiscountPercentageWithVat;
                    }
                }

                @*  Total Discounts *@
                ViewContext.Writer.Write("<div class='floated item_info_name'><label>" + Resources.TotalDiscountPercentage + "</label>");

                @Html.DevExpress().SpinEdit(total_after_discountsettings =>
                {
                    total_after_discountsettings.Name = "total_discount_percentage";
                    total_after_discountsettings.Width = Unit.Percentage(100);
                    total_after_discountsettings.Enabled = true;
                    total_after_discountsettings.ReadOnly = true;
                    total_after_discountsettings.ControlStyle.CssClass = "textOnly";
                    total_after_discountsettings.ClientEnabled = false;
                    total_after_discountsettings.Properties.NumberType = SpinEditNumberType.Float;
                    total_after_discountsettings.Properties.DecimalPlaces = 2;
                    total_after_discountsettings.Properties.SpinButtons.Visible = false;
                    total_after_discountsettings.Properties.SpinButtons.ShowIncrementButtons = false;
                    total_after_discountsettings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
                    total_after_discountsettings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    total_after_discountsettings.Properties.Increment = 0;
                    total_after_discountsettings.Properties.LargeIncrement = 0;
                }).Bind(docdet != null ? (decimal?) 100 * totalDiscountPercentage : null).GetHtml();

                ViewContext.Writer.Write("</div>");

                ViewContext.Writer.Write("<div class='floated item_info_name'><label>" + Resources.TotalDiscount + " €</label>");

                @Html.DevExpress().SpinEdit(total_after_discountsettings =>
                {
                    total_after_discountsettings.Name = "total_discount";
                    total_after_discountsettings.Enabled = true;
                    total_after_discountsettings.ControlStyle.CssClass = "textOnly";
                    total_after_discountsettings.ClientEnabled = false;
                    total_after_discountsettings.Width = Unit.Percentage(100);
                    total_after_discountsettings.ReadOnly = true;
                    total_after_discountsettings.Properties.NumberType = SpinEditNumberType.Float;
                    total_after_discountsettings.Properties.NumberFormat = SpinEditNumberFormat.Custom;
                    total_after_discountsettings.Properties.DisplayFormatString = ownerAppSettings.formatCurrencyString;
                    //total_after_discountsettings.Properties.DecimalPlaces = (int)ownerAppSettings.DisplayValueDigits;
                    total_after_discountsettings.Properties.SpinButtons.Visible = false;
                    total_after_discountsettings.Properties.SpinButtons.ShowIncrementButtons = false;
                    total_after_discountsettings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
                    total_after_discountsettings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    total_after_discountsettings.Properties.Increment = 0;
                    total_after_discountsettings.Properties.LargeIncrement = 0;
                }).Bind(docdet != null ? (double?)docdet.TotalDiscount : null).GetHtml();
                ViewContext.Writer.Write("</div>");

                ViewContext.Writer.Write("<div class='floated'><label>" + Resources.TotalAfterDiscount + "</label>");

                @Html.DevExpress().SpinEdit(total_after_discountsettings =>
                {
                    total_after_discountsettings.Name = "net_total";
                    total_after_discountsettings.Enabled = true;
                    total_after_discountsettings.ReadOnly = true;
                    total_after_discountsettings.ControlStyle.CssClass = "textOnly";
                    total_after_discountsettings.ClientEnabled = false;
                    total_after_discountsettings.Width = Unit.Percentage(100);
                    total_after_discountsettings.ControlStyle.ForeColor = System.Drawing.Color.Black;
                    total_after_discountsettings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    total_after_discountsettings.Properties.NumberType = SpinEditNumberType.Float;
                    total_after_discountsettings.Properties.NumberFormat = SpinEditNumberFormat.Custom;
                    total_after_discountsettings.Properties.DisplayFormatString = ownerAppSettings.formatCurrencyString;
                    //total_after_discountsettings.Properties.DecimalPlaces = (int)ownerAppSettings.DisplayValueDigits;
                    total_after_discountsettings.Properties.SpinButtons.Visible = false;
                    total_after_discountsettings.Properties.SpinButtons.ShowIncrementButtons = false;
                    total_after_discountsettings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
                    total_after_discountsettings.Properties.Increment = 0;
                    total_after_discountsettings.Properties.LargeIncrement = 0;
                }).Bind(docdet == null ? null : (double?)docdet.NetTotal).GetHtml();

                ViewContext.Writer.Write("</div>");


                ViewContext.Writer.Write("<div class='floated'>");
                ViewContext.Writer.Write("<label>" + Resources.TotalVATAmount + "(€):" + "</label>");

                @Html.DevExpress().SpinEdit(final_fpa_sum_settings =>
                {
                    final_fpa_sum_settings.Name = "total_vat_amount";
                    final_fpa_sum_settings.Enabled = true;
                    final_fpa_sum_settings.ControlStyle.CssClass = "textOnly";
                    final_fpa_sum_settings.ReadOnly = true;
                    final_fpa_sum_settings.ClientEnabled = false;
                    final_fpa_sum_settings.Width = Unit.Percentage(100);
                    final_fpa_sum_settings.ControlStyle.ForeColor = System.Drawing.Color.Black;
                    final_fpa_sum_settings.Properties.NumberType = SpinEditNumberType.Float;
                    final_fpa_sum_settings.Properties.NumberFormat = SpinEditNumberFormat.Custom;
                    final_fpa_sum_settings.Properties.DisplayFormatString = ownerAppSettings.formatCurrencyString;
                    //final_fpa_sum_settings.Properties.DecimalPlaces = (int)ownerAppSettings.DisplayValueDigits;
                    final_fpa_sum_settings.Properties.SpinButtons.Visible = false;
                    final_fpa_sum_settings.Properties.SpinButtons.ShowIncrementButtons = false;
                    final_fpa_sum_settings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
                    final_fpa_sum_settings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    final_fpa_sum_settings.Properties.Increment = 0;
                    final_fpa_sum_settings.Properties.LargeIncrement = 0;
                }).Bind(docdet == null ? null : (double?)docdet.TotalVatAmount).GetHtml();
                ViewContext.Writer.Write("</div>");

                ViewContext.Writer.Write("<div class='floated item_info_name'>");
                ViewContext.Writer.Write("<label>" + Resources.TotalSort + "</label>");

                @Html.DevExpress().SpinEdit(final_sum_settings =>
                {
                    final_sum_settings.Name = "gross_total";
                    final_sum_settings.Enabled = true;
                    final_sum_settings.ControlStyle.CssClass = "textOnly";
                    final_sum_settings.Width = Unit.Percentage(100);
                    final_sum_settings.ClientEnabled = false;
                    final_sum_settings.ControlStyle.ForeColor = System.Drawing.Color.Black;
                    final_sum_settings.Properties.NumberType = SpinEditNumberType.Float;
                    final_sum_settings.Properties.NumberFormat = SpinEditNumberFormat.Custom;
                    //final_sum_settings.Properties.DecimalPlaces = (int)ownerAppSettings.DisplayValueDigits;
                    final_sum_settings.Properties.DisplayFormatString = ownerAppSettings.formatCurrencyString;
                    final_sum_settings.Properties.SpinButtons.Visible = false;
                    final_sum_settings.Properties.SpinButtons.ShowIncrementButtons = false;
                    final_sum_settings.Properties.SpinButtons.ShowLargeIncrementButtons = false;
                    final_sum_settings.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                    final_sum_settings.Properties.Increment = 0;
                    final_sum_settings.Properties.LargeIncrement = 0;
                }).Bind(docdet == null ? null : (double?)docdet.GrossTotal).GetHtml();
                ViewContext.Writer.Write("</div>");

                ViewContext.Writer.Write("<div class='floated full_width'>");
                ViewContext.Writer.Write("<label>" + Resources.Remarks + "</label>");

                @Html.DevExpress().Memo(txt_settings =>
                {
                    txt_settings.Name = "Remarks";
                    txt_settings.Height = 80;
                    txt_settings.Width = Unit.Percentage(98);
                    txt_settings.Enabled = editMode;
                    txt_settings.TabIndex = -1;
                }).Bind(docdet != null ? docdet.Remarks : "").Render();

                ViewContext.Writer.Write("</div>");
            }
        });
    }).GetHtml();

}