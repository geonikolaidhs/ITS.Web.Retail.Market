@using ITS.Retail.ResourcesLib;
@Html.DevExpress().GridView(settings =>
{
    settings.Name = "grdDocumentStatus";
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
    settings.SettingsBehavior.EnableCustomizationWindow = true;
    settings.ClientSideEvents.ContextMenu = "CustomizationWindowBtn_Click";
    settings.HtmlRowPrepared = (object sender, ASPxGridViewTableRowEventArgs e) =>
    {
        if (e.RowType == GridViewRowType.Data)
        {
            e.Row.Attributes.Remove("oncontextmenu");           
        }
    };
    settings.CommandColumn.Visible = true;
    settings.CommandColumn.ShowSelectCheckbox = true;
    settings.CommandColumn.ShowNewButton= false;
    settings.CommandColumn.ShowUpdateButton = false;
    settings.CommandColumn.ShowEditButton = false;
    settings.CommandColumn.ShowDeleteButton = false;
    settings.CommandColumn.ShowClearFilterButton = true;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Settings.ShowFilterRow = false;
    settings.Settings.ShowFilterRowMenu = true;
    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Auto;
    settings.Settings.ShowFooter = true;
    settings.Settings.ShowGroupPanel = false;
    settings.Settings.ShowHeaderFilterButton = true;
    settings.KeyFieldName = "Oid";
    settings.CallbackRouteValues = new { Controller = "DocumentStatus", Action = "Grid" };
    settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
    settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;
    settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.Center;
    settings.SettingsPopup.EditForm.Modal = true;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "DocumentStatus", Action = "InsertPartial" };
    settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "DocumentStatus", Action = "UpdatePartial" };
    settings.SettingsBehavior.ConfirmDelete = true;
    settings.KeyboardSupport = false;
    settings.CommandColumn.Caption = Resources.Actions;
    settings.SettingsPager.PageSize = 30;
    settings.SettingsCookies.Enabled = false;
    settings.SettingsCookies.StoreColumnsVisiblePosition = true;
    settings.Settings.ShowTitlePanel = true;
    settings.SettingsText.Title = Resources.MenuDocumentSettigsDocumentStatus;
    settings.SettingsCookies.StoreColumnsWidth = true;
    settings.SettingsCookies.StoreFiltering = false;
    settings.SettingsCookies.StorePaging = true;
    settings.ClientSideEvents.SelectionChanged = "SelectionChanged";
    settings.ClientSideEvents.EndCallback = "grdOnEndCalback";
    settings.Settings.GridLines = System.Web.UI.WebControls.GridLines.Vertical;
    settings.Styles.Header.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
    settings.SettingsPager.EnableAdaptivity = true;
    settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.TopAndBottom;
    settings.CommandColumn.CellStyle.CssClass = "firstCollumn";
    settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.AllPages;
    settings.CommandColumn.Width = 50;
    settings.CommandColumn.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
    settings.CommandColumn.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
    settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.NextColumn;
    settings.SettingsBehavior.EnableRowHotTrack = true;
    settings.Columns.Add(col => 
    {
            col.FieldName ="Code";
            col.Caption = Resources.Code;
            col.HeaderStyle.Wrap = DefaultBoolean.True;
            col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName="Description";
        col.Caption = Resources.Description;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "ReadOnly";
        col.Caption = Resources.ReadOnly ;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        var checkBoxProperties = col.PropertiesEdit as CheckBoxProperties;
        checkBoxProperties.ValueChecked = true;
        checkBoxProperties.ValueGrayed = false;
        checkBoxProperties.ValueUnchecked = false;
        checkBoxProperties.ValueType = typeof(bool);
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "IsDefault";
        col.Caption = Resources.Default;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        (col.PropertiesEdit as CheckBoxProperties).ValueChecked = true;
        (col.PropertiesEdit as CheckBoxProperties).ValueGrayed = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueUnchecked = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueType = typeof(bool);
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "TakeSequence";
        col.Caption = Resources.TakeSequence;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        (col.PropertiesEdit as CheckBoxProperties).ValueChecked = true;
        (col.PropertiesEdit as CheckBoxProperties).ValueGrayed = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueUnchecked = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueType = typeof(bool);
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });
    
    settings.CellEditorInitialize = (sender, e) =>
    {
        if ((sender as MVCxGridView).IsNewRowEditing)
        {
            if (e.Column.FieldName == "IsDefault")
            {
                (e.Editor as ASPxCheckBox).Checked = false;
            }
            if (e.Column.FieldName == "TakeSequence")
            {
                (e.Editor as ASPxCheckBox).Checked = false;
            }
            if (e.Column.FieldName == "ReadOnly")
            {
                (e.Editor as ASPxCheckBox).Checked = false;
            }
        }
    };

    settings.SettingsText.PopupEditFormCaption = Resources.DocumentStatus;
    settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;
    settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;

    settings.ClientLayout += (sndr, evt) =>
    {
        User user = (User)ViewBag.CurrentUser;
        if (user != null)
        {
            if (evt.LayoutMode == ClientLayoutMode.Loading)
            {
                GridSettings sets = user.GridSettings.FirstOrDefault(x => x.GridName == settings.Name);
                if (sets != null)
                {
                    evt.LayoutData = sets.GridLayout;
                }
            }
            else
            {
                BaseController.UpdateUserGridSettings(user.Oid, settings.Name, evt.LayoutData);
            }
        }
    };
    
    settings.SetEditFormTemplateContent(editContent =>
    {
        var item = @ViewBag.CurrentItem != null ? @ViewBag.CurrentItem : editContent.DataItem;

        ViewContext.Writer.Write("<div class='ValidationContainer'>");
        /*Header banner*/
        HeaderOptions headerOptions = new HeaderOptions("");
        headerOptions.SaveButton.Name = "btnDocumentStatusUpdate";
        headerOptions.SaveButton.OnClick = "function(s, e){ValidateForm(s,e," + settings.Name + ");}";
        headerOptions.CancelButton.Name = "btnDocumentStatusCancel";
        headerOptions.CancelButton.OnClick = "function(s, e){ " + settings.Name + ".CancelEdit(); }";
        headerOptions.ViewType = eViewType.PopUp;
        HtmlGenerator.CreateViewHeader(Html, ViewData, headerOptions, true);
        /*End of header banner*/

        ViewContext.Writer.Write("<table><tr><td>");
        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label required_field";
            edtSettings.Text = Resources.Code + ":";
        }).Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().TextBox(edtSettings =>
        {
            edtSettings.Name = "Code";
            edtSettings.ControlStyle.CssClass = "editor";
            edtSettings.ShowModelErrors = true;
            edtSettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            edtSettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS; 
        }).Bind(DataBinder.Eval(item, "Code")).Render();

        ViewContext.Writer.Write("</td></tr><tr><td>");

        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label required_field";
            edtSettings.Text = Resources.Description + ":";
        }).Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().TextBox(
            edtSettings =>
            {
                edtSettings.Name = "Description";
                edtSettings.ControlStyle.CssClass = "editor";
                edtSettings.ShowModelErrors = true;
                edtSettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
                edtSettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS; 
            }
        ).Bind(DataBinder.Eval(item, "Description"))
        .Render();

        ViewContext.Writer.Write("</td></tr><tr><td>");

        Html.DevExpress().CheckBox(edtSettings =>
        {
            edtSettings.Name = "IsDefault";
            edtSettings.Text = Resources.Default;
            edtSettings.ControlStyle.CssClass = "editor";
            edtSettings.ShowModelErrors = true;
            edtSettings.Properties.ValueChecked = true;
            edtSettings.Properties.ValueGrayed = false;
            edtSettings.Properties.ValueUnchecked = false;
            edtSettings.Properties.ValueType = typeof(bool);
        }).Bind(DataBinder.Eval(item, "IsDefault") ?? false).Render();
        
        ViewContext.Writer.Write("</td></tr><tr><td>");

        Html.DevExpress().CheckBox(
             edtSettings =>
             {
                 edtSettings.Text = Resources.ReadOnly;
                 edtSettings.Name = "ReadOnly";
                 edtSettings.ControlStyle.CssClass = "editor";
                 edtSettings.Properties.ValueChecked = true;
                 edtSettings.Properties.ValueGrayed = false;
                 edtSettings.Properties.ValueUnchecked = false;
                 edtSettings.Properties.ValueType = typeof(bool);
             }
         ).Bind(DataBinder.Eval(item, "ReadOnly") ?? false).Render();


        ViewContext.Writer.Write("</td></tr><tr><td>");

        Html.DevExpress().CheckBox(
             edtSettings =>
             {
                 edtSettings.Text = Resources.TakeSequence;
                 edtSettings.Name = "TakeSequence";
                 edtSettings.ControlStyle.CssClass = "editor";
                 edtSettings.Properties.ValueChecked = true;
                 edtSettings.Properties.ValueGrayed = false;
                 edtSettings.Properties.ValueUnchecked = false;
                 edtSettings.Properties.ValueType = typeof(bool);
             }
         ).Bind(DataBinder.Eval(item, "TakeSequence") ?? false).Render();
        ViewContext.Writer.Write("</td></tr></table>");      
       
        ViewContext.Writer.Write("</div>");
    });

}).Bind(Model).GetHtml()