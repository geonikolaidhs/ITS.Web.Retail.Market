@using ITS.Retail.ResourcesLib;
@Html.DevExpress().GridView(settings =>
{
    settings.Name = "grdDocumentType";
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
    settings.SettingsBehavior.EnableCustomizationWindow = true;
    settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.NextColumn;
    settings.SettingsBehavior.EnableRowHotTrack = true;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Settings.ShowFilterRow = false;
    settings.Settings.ShowFilterRowMenu = true;
    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Auto;
    settings.Settings.ShowFooter = true;
    settings.Settings.ShowGroupPanel = false;
    settings.Settings.ShowHeaderFilterButton = true;
    settings.KeyFieldName = "Oid";
    settings.CallbackRouteValues = new { Controller = "DocumentType", Action = "Grid" };
    settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
    settings.SettingsPopup.EditForm.Modal = true;
    settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "DocumentType", Action = "Insert" };
    settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "DocumentType", Action = "UpdatePartial" };
    settings.SettingsBehavior.ConfirmDelete = true;
    settings.CommandColumn.Visible = true;
    settings.CommandColumn.ShowSelectCheckbox = true;
    settings.CommandColumn.ShowNewButton= false;
    settings.CommandColumn.ShowUpdateButton = false;
    settings.CommandColumn.ShowDeleteButton = false;
    settings.CommandColumn.ShowEditButton = false;
    settings.KeyboardSupport = false;
    settings.CommandColumn.Caption = Resources.Actions;
    settings.SettingsPager.PageSize = 30;
    settings.SettingsCookies.Enabled = false;
    settings.SettingsCookies.StoreColumnsVisiblePosition = true;
    settings.Settings.ShowTitlePanel = true;
    settings.SettingsText.Title = Resources.MenuDocumentSettigsDocumentTypes;
    settings.SettingsCookies.StoreColumnsWidth = true;
    settings.SettingsCookies.StoreFiltering = false;
    settings.SettingsCookies.StorePaging = true;
    settings.ClientSideEvents.SelectionChanged = "SelectionChanged";
    settings.ClientSideEvents.BeginCallback = "DocumentTypeOnBeginCallback";
    settings.Settings.GridLines = System.Web.UI.WebControls.GridLines.Vertical;
    settings.Styles.Header.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

    settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.TopAndBottom;

    settings.CommandColumn.Width = 50;
    settings.CommandColumn.CellStyle.CssClass = "firstCollumn";
    settings.CommandColumn.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
    settings.CommandColumn.HeaderStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;
    settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;
    settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.Center;
    settings.ClientSideEvents.EndCallback = "grdOnEndCalback";

    settings.Columns.Add(col =>
    {
        col.FieldName = "Code";
        col.SortAscending();
        col.Caption = Resources.Code;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "Description";
        col.Caption = Resources.Description;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });
    settings.Columns.Add(col =>
    {
        col.FieldName = "IsDefault";
        col.Caption = Resources.DefaultOrderType;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        (col.PropertiesEdit as CheckBoxProperties).ValueChecked = true;
        (col.PropertiesEdit as CheckBoxProperties).ValueGrayed = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueUnchecked = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueType = typeof(bool);
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "MergedSameDocumentLines";
        col.Caption = Resources.MergedSameDocumentLines;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        (col.PropertiesEdit as CheckBoxProperties).ValueChecked = true;
        (col.PropertiesEdit as CheckBoxProperties).ValueGrayed = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueUnchecked = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueType = typeof(bool);
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "UsesPrices";
        col.Caption = Resources.UsesPrices;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        (col.PropertiesEdit as CheckBoxProperties).ValueChecked = true;
        (col.PropertiesEdit as CheckBoxProperties).ValueGrayed = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueUnchecked = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueType = typeof(bool);
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "TakesDigitalSignature";
        col.Caption = Resources.TakesDigitalSignature;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        (col.PropertiesEdit as CheckBoxProperties).ValueChecked = true;
        (col.PropertiesEdit as CheckBoxProperties).ValueGrayed = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueUnchecked = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueType = typeof(bool);
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "IsForWholesale";
        col.Caption = Resources.IsForWholesale;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        (col.PropertiesEdit as CheckBoxProperties).ValueChecked = true;
        (col.PropertiesEdit as CheckBoxProperties).ValueGrayed = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueUnchecked = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueType = typeof(bool);
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "UsesPaymentMethods";
        col.Caption = Resources.UsesPaymentMethods;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        (col.PropertiesEdit as CheckBoxProperties).ValueChecked = true;
        (col.PropertiesEdit as CheckBoxProperties).ValueGrayed = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueUnchecked = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueType = typeof(bool);
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "AffectsCustomerBalance";
        col.Caption = Resources.AffectsCustomerBalance;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.ColumnType = MVCxGridViewColumnType.CheckBox;
        (col.PropertiesEdit as CheckBoxProperties).ValueChecked = true;
        (col.PropertiesEdit as CheckBoxProperties).ValueGrayed = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueUnchecked = false;
        (col.PropertiesEdit as CheckBoxProperties).ValueType = typeof(bool);
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "QuantityFactor";
        col.Caption = Resources.QuantityFactor;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "ValueFactor";
        col.Caption = Resources.ValueFactor;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.CellStyle.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Left;
    });


    settings.Columns.Add(col =>
    {
        col.FieldName = "MinistryDocumentType.Title";
        col.Caption = Resources.MinistryDocumentType;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "Division.Description";
        col.Caption = Resources.Division;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "Owner.CompanyName";
        col.Caption = Resources.Company;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "MeasurementUnitMode";
        col.Caption = Resources.MeasurementUnitMode;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.SetDataItemTemplateContent(c =>
        {
            ViewContext.Writer.Write(((eDocumentTypeMeasurementUnit)DataBinder.Eval(c.DataItem, "MeasurementUnitMode")).ToLocalizedString());
        });
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "Type";
        col.Caption = Resources.MobileType;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });


    settings.CellEditorInitialize = (sender, e) =>
    {
        if ((sender as MVCxGridView).IsNewRowEditing)
        {
            if (e.Column.FieldName == "IsDefault")
            {
                (e.Editor as ASPxCheckBox).Checked = false;
            }
        }

    };

    settings.SettingsText.PopupEditFormCaption = Resources.DocumentType;

    settings.SettingsPager.EnableAdaptivity = true;
    settings.SettingsCookies.StoreFiltering = false;

    settings.ClientLayout += (sndr, evt) =>
    {
        User user = (User)ViewBag.CurrentUser;
        if (user != null)
        {
            if (evt.LayoutMode == ClientLayoutMode.Loading)
            {
                GridSettings sets = user.GridSettings.FirstOrDefault(x => x.GridName == settings.Name);
                if (sets != null)
                {
                    evt.LayoutData = sets.GridLayout;
                }
            }
            else
            {
                BaseController.UpdateUserGridSettings(user.Oid, settings.Name, evt.LayoutData);
            }
        }
    };

}).Bind(Model).GetHtml()