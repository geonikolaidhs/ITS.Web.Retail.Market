@using System.Web.UI.WebControls;
@model IEnumerable<CustomerStorePriceList>

@Html.DevExpress().GridView(settings =>
{
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
    settings.Settings.GridLines = System.Web.UI.WebControls.GridLines.Vertical;
    settings.Styles.Header.HorizontalAlign = HorizontalAlign.Center;

    if (ViewData["displayCommands"] != null && bool.Parse(ViewData["displayCommands"].ToString()) == true)
    {
        settings.Name = "grdCustomerStorePriceListEdit" + ViewData["CustomerID"].ToString().Replace('-', '_');
        settings.Columns.Add(column =>
        {
            column.Caption = "#";
            column.SetDataItemTemplateContent(c =>
            {
                ViewContext.Writer.Write(
                    "<a href='javascript:;' onclick=\"" + settings.Name + ".SetFocusedRowIndex('" + c.ItemIndex.ToString() + "');" + settings.Name + ".StartEditRow('" + c.ItemIndex.ToString() + "');\" title=\"" + Resources.Edit + "\"><img src='" + Url.Content("~/Content/img/edit.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Edit + "\" /></a>" +
                    "<a href='javascript:;' onclick=\"" + settings.Name + ".DeleteRow('" + c.ItemIndex.ToString() + "');\" title=\"" + Resources.Delete + "\"><img src='" + Url.Content("~/Content/img/del.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Delete + "\" /></a>"
                );
            });
            column.SetHeaderTemplateContent(c =>
            {
                ViewContext.Writer.Write(
                    "<a href='javascript:;' onclick=\"if(ValidateModalFormSingle()) " + settings.Name + ".AddNewRow();\" title='" + Resources.New + "'><img src='" + Url.Content("~/Content/img/plus.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.New + "\" /></a>"
                );
                ViewContext.Writer.Write(Html.Hidden("CustomerID", ViewData["CustomerID"]));
            });

            column.Settings.AllowDragDrop = DefaultBoolean.False;
            column.Settings.AllowSort = DefaultBoolean.False;
            column.Width = 70;
            column.EditFormSettings.Visible =  DefaultBoolean.False;
        });
    }
    else
    {
        settings.Name = "grdCustomerStorePriceList" + ViewData["CustomerID"].ToString().Replace('-', '_');
    }

    settings.Columns.Add(col =>
    {
        col.FieldName = "StorePriceList.Store.Name";
        col.Caption = Resources.Store;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "StorePriceList.PriceList.Description";
        column.Caption = Resources.PriceCatalog;
        column.HeaderStyle.Wrap = DefaultBoolean.True;
        column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });

    settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.NextColumn;
    settings.SettingsBehavior.EnableRowHotTrack = true;
    settings.Width = Unit.Percentage(100);
    settings.Settings.ShowFilterRow = false;
    settings.Settings.ShowFooter = true;
    settings.Settings.ShowHeaderFilterButton = true;
    settings.KeyFieldName = "Oid";

    settings.CallbackRouteValues = new { Controller = "Customer", Action = "CustomerStorePriceListGrid", displayCommands = ViewData["displayCommands"], CustomerID = ViewData["CustomerID"] };
    settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;

    settings.SettingsPopup.EditForm.Modal = true;
    settings.SettingsPopup.EditForm.ShowHeader = true;
    settings.SettingsPopup.EditForm.Height = Unit.Percentage(100);
    settings.SettingsPopup.EditForm.Width = Unit.Percentage(100);
    settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
    settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.BottomSides;
    settings.SettingsText.PopupEditFormCaption = Resources.EditAddress;
    settings.SettingsEditing.UpdateRowRouteValues = settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Customer", Action = "CustomerStorePriceListUpdate" };
    settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Customer", Action = "CustomerStorePriceListDelete" };
    settings.SettingsBehavior.ConfirmDelete = true;
    settings.KeyboardSupport = false;
    settings.SettingsPager.PageSize = 30;
    settings.SettingsCookies.Enabled = false;
    settings.SettingsCookies.StoreColumnsVisiblePosition = true;
    settings.SettingsCookies.StoreColumnsWidth = true;
    settings.SettingsCookies.StoreFiltering = false;
    settings.SettingsCookies.StorePaging = true;
    settings.Settings.ShowTitlePanel = true;
    settings.SettingsText.Title = Resources.PriceCatalogs;

    settings.SettingsPager.Position = PagerPosition.TopAndBottom;

    string gridName = "";

    if (ViewData["displayCommands"] != null && bool.Parse(ViewData["displayCommands"].ToString()) == true)
    {
        gridName = "grdCustomerStorePriceListEdit";
    }
    else
    {
        gridName = "grdCustomerStorePriceList";
    }

    settings.ClientLayout += (sndr, evt) =>
    {
        User user = (User)ViewBag.CurrentUser;
        if (user != null)
        {
            if (evt.LayoutMode == ClientLayoutMode.Loading)
            {
                GridSettings sets = user.GridSettings.FirstOrDefault(x => x.GridName == gridName);
                if (sets != null)
                {
                    evt.LayoutData = sets.GridLayout;
                }
            }
            else
            {
                BaseController.UpdateUserGridSettings(user.Oid, gridName, evt.LayoutData);
            }
        }
    };

    settings.PreRender = (sender, e) =>
    {
        ((MVCxGridView)sender).FocusedRowIndex = 0;
    };

    settings.SettingsPager.EnableAdaptivity = true;

    settings.SettingsText.PopupEditFormCaption = Resources.CustomerPriceCatalogs;
    settings.SetEditFormTemplateContent(editContent =>
    {
        var item = ViewBag.CurrentItem ?? editContent.DataItem;
        var spl = DataBinder.Eval(item, "StorePriceList!");
        ViewContext.Writer.Write("<div class='ValidationContainer'>");

        /*Header banner*/
        HeaderOptions headerOptions = new HeaderOptions("");
        headerOptions.SaveButton.Name = "btnAdrUpdate";
        headerOptions.SaveButton.OnClick = @"function(s, e){ValidateForm(s,e," + settings.Name + ");}";
        headerOptions.CancelButton.Name = "btnAdrCancel";
        headerOptions.CancelButton.OnClick = "function(s, e){ " + settings.Name + ".CancelEdit(); }";
        headerOptions.ViewType = eViewType.PopUp;
        HtmlGenerator.CreateViewHeader(Html, ViewData, headerOptions, true);
        /*End of header banner*/

        ViewContext.Writer.Write("<table><tr><td>");

        @Html.DevExpress().ComboBox(combosettings =>
        {
            combosettings.CallbackRouteValues = new { Controller = "Customer", Action = "UpdateStoreComboBox" };
            combosettings.Properties.Caption = Resources.Store + ":";
            combosettings.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
            combosettings.Properties.CaptionStyle.CssClass = "label";
            combosettings.Name = "StoreKey";
            combosettings.ControlStyle.CssClass = "editor";
            combosettings.Properties.TextField = "Name";
            combosettings.Properties.ValueField = "Oid";
            combosettings.Properties.ValueType = typeof(Guid);
            combosettings.Properties.ClientSideEvents.ValueChanged = "StoreComboBoxValueChanged";
            combosettings.ShowModelErrors = true;
            combosettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            combosettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS;

        }).BindList(ViewBag.Stores).Bind(DataBinder.Eval(spl, "Store!Key")).Render();

        ViewContext.Writer.Write("</td></tr><tr><td>");

        ViewData["StorePriceList"] = spl;

        Html.RenderPartial("UpdatePriceCatalogComboBox");      

        ViewContext.Writer.Write("</td><td class=\"vertical-align-td-bottom\">");

        Html.DevExpress().CheckBox(edtSettings =>
        {
            edtSettings.Name = "IsDefault";
            edtSettings.Text = Resources.Default;
            edtSettings.ControlStyle.CssClass = "editor";
            edtSettings.Properties.ValueChecked = true;
            edtSettings.Properties.ValueGrayed = false;
            edtSettings.Properties.ValueUnchecked = false;
            edtSettings.Properties.ValueType = typeof(bool);
            edtSettings.ShowModelErrors = true;
        }).Bind(DataBinder.Eval(item, "IsDefault") ?? false).Render();

        ViewContext.Writer.Write("</td></tr></table></div>");
    });
}).Bind(Model).GetHtml()
