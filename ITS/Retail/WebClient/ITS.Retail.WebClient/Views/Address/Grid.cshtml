@using System.Web.UI.WebControls;
@model IEnumerable<Address>

@Html.DevExpress().GridView(settings =>
{
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
    settings.Settings.GridLines = System.Web.UI.WebControls.GridLines.Vertical;
    settings.Styles.Header.HorizontalAlign = HorizontalAlign.Center;
    settings.SettingsPager.EnableAdaptivity = true;
    string gridName = "";
    if (ViewData["displayCommands"] != null && bool.Parse(ViewData["displayCommands"].ToString()) == true)
    {
        settings.Name = gridName = "grdAddressEdit";
        settings.Columns.Add(column =>
        {
            column.Caption = "#";
            column.SetDataItemTemplateContent(c =>
            {
                ViewContext.Writer.Write(
                    "<a href='javascript:;' onclick=\"" + settings.Name + ".SetFocusedRowIndex('" + c.ItemIndex.ToString() + "');" + settings.Name + ".StartEditRow('" + c.ItemIndex.ToString() + "');\" title=\"" + Resources.Edit + "\"><img src='" + Url.Content("~/Content/img/edit.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Edit + "\" /></a>" +
                    "<a href='javascript:;' onclick=\"" + settings.Name + ".DeleteRow('" + c.ItemIndex.ToString() + "');\" title=\"" + Resources.Delete + "\"><img src='" + Url.Content("~/Content/img/del.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Delete + "\" /></a>"
                );
            });
            column.SetHeaderTemplateContent(c =>
            {
                ViewContext.Writer.Write(
                    "<a href='javascript:;' onclick=\"if(ValidateModalFormSingle()){ try { UpdateAddressGridFromViesData();} catch(error){} " + settings.Name + ".AddNewRow();}\" title='" + Resources.New + "'><img src='" + Url.Content("~/Content/img/plus.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.New + "\" /></a>"
                );
                ViewContext.Writer.Write(Html.Hidden("TraderID", ViewData["Trader_ID"]));
                ViewContext.Writer.Write(Html.Hidden("adrSupplierID", ViewData["Supplier_ID"]));
            });

            column.Settings.AllowDragDrop = DefaultBoolean.False;
            column.Settings.AllowSort = DefaultBoolean.False;
            column.Width = 70;
        });
    }
    else
    {
        settings.Name = gridName = "grdAddress";

        settings.Columns.Add(column =>
        {
            column.Caption = "";
            column.SetDataItemTemplateContent(c =>
            {
                settings.Name = "grdAddress" + ViewData["Trader_ID"].ToString().Replace('-', '_');
                ViewContext.Writer.Write("<div id='divPhone" + DataBinder.Eval(c.DataItem, "Oid").ToString().Replace('-', '_') + "' style='display:none' >");
                @Html.RenderAction("ParameterGrid", "Phone", new { strAddressID = DataBinder.Eval(c.DataItem, "Oid"), displayCommands = false });
                ViewContext.Writer.Write("</div>");
            });
            column.Width = 1;
            column.Visible = true;
            column.HeaderStyle.Wrap = DefaultBoolean.True;
        });
    }

    settings.Columns.Add(col =>
    {
        col.FieldName = "AutomaticNumbering";
        col.Caption = Resources.AutomaticNumberingShort;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "Street";
        col.Caption = Resources.Street;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "Profession";
        column.Caption = Resources.AddressProfession;
        column.HeaderStyle.Wrap = DefaultBoolean.True;
        column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "POBox";
        column.Caption = Resources.POBox;
        column.HeaderStyle.Wrap = DefaultBoolean.True;
        column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "AddressType.Description";
        column.Caption = Resources.AddressType;
        column.HeaderStyle.Wrap = DefaultBoolean.True;
        column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "PostCode";
        column.Caption = Resources.PostCode;
        column.HeaderStyle.Wrap = DefaultBoolean.True;
        column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "City";
        column.Caption = Resources.City;
        column.HeaderStyle.Wrap = DefaultBoolean.True;
        column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });

    settings.Columns.Add(column =>
    {
        column.FieldName = "DefaultPhone.Number";
        column.Caption = Resources.DefaultPhone;
        column.HeaderStyle.Wrap = DefaultBoolean.True;
        column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "VatLevel.Description";
        column.Caption = Resources.VatLevel;
        column.HeaderStyle.Wrap = DefaultBoolean.True;
        column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });
    settings.Columns.Add(column =>
    {
        column.FieldName = "ThirdPartNum";
        column.Caption = Resources.ThirdPartNum;
        column.HeaderStyle.Wrap = DefaultBoolean.True;
        column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });

    settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.NextColumn;
    settings.SettingsBehavior.EnableRowHotTrack = true;
    settings.Width = Unit.Percentage(100);
    settings.Settings.ShowFilterRow = false;
    settings.AccessibilityCompliant = true;
    settings.Settings.ShowFooter = true;
    settings.Settings.ShowHeaderFilterButton = true;
    settings.KeyFieldName = "Oid";

    settings.CallbackRouteValues = new { Controller = "Address", Action = "AddressGrid", strTraderID = ViewData["Trader_ID"], displayCommands = ViewData["displayCommands"], supplierID = ViewData["Supplier_ID"] };
    settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;

    settings.SettingsPopup.EditForm.Modal = true;
    settings.SettingsPopup.EditForm.ShowHeader = true;
    settings.SettingsPopup.EditForm.Width = Unit.Percentage(100);
    settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
    settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.BottomSides;

    settings.SettingsText.PopupEditFormCaption = Resources.EditAddress;
    settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "Address", Action = "InlineEditingAddNewPartial" };
    settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "Address", Action = "InlineEditingUpdatePartial" };
    settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "Address", Action = "InlineEditingDeletePartial" };
    settings.SettingsBehavior.ConfirmDelete = true;

    settings.KeyboardSupport = false;
    settings.SettingsPager.PageSize = 30;


    settings.SettingsCookies.Enabled = false;
    settings.SettingsCookies.StoreFiltering = false;
    settings.SettingsCookies.StoreColumnsVisiblePosition = true;
    settings.SettingsCookies.StoreColumnsWidth = true;
    settings.SettingsCookies.StorePaging = true;

    settings.ClientLayout += (sndr, evt) =>
    {
        User user = (User)ViewBag.CurrentUser;
        if (user != null)
        {
            if (evt.LayoutMode == ClientLayoutMode.Loading)
            {
                GridSettings sets = user.GridSettings.FirstOrDefault(x => x.GridName == gridName);
                if (sets != null)
                {
                    evt.LayoutData = sets.GridLayout;
                }
            }
            else
            {
                BaseController.UpdateUserGridSettings(user.Oid, gridName, evt.LayoutData);
            }
        }
    };

    settings.Settings.ShowTitlePanel = true;
    settings.SettingsText.Title = Resources.Addresses;
    settings.SettingsPager.Position = PagerPosition.TopAndBottom;

    if (ViewData["displayCommands"] != null && bool.Parse(ViewData["displayCommands"].ToString()) == true)
    {
    }
    else
    {
        settings.ClientSideEvents.FocusedRowChanged = "Component.OnAddressGridFocusedRowChanged";
    }

    settings.PreRender = (sender, e) =>
    {
        ((MVCxGridView)sender).FocusedRowIndex = 0;
    };

    settings.CommandButtonInitialize = (s, e) =>
    {
        if (e.ButtonType == ColumnCommandButtonType.New)
        {
            if (ViewData["traderid"] == null || ViewData["traderid"].ToString() == "" || ViewData["traderid"].ToString() == "-1")
            {
                e.Visible = false;
            }
            else
            {
                e.Visible = true;
            }

        }
    };

    settings.ClientSideEvents.EndCallback = "Component.OnAddressEndCalback";
    settings.ClientSideEvents.BeginCallback = "Component.OnAddressBeginCalback";
    settings.SettingsText.PopupEditFormCaption = Resources.Address;
    settings.SetEditFormTemplateContent(editContent =>
    {
        var item = @ViewBag.CurrentItem != null ? @ViewBag.CurrentItem : editContent.DataItem;

        ViewContext.Writer.Write("<div class='ValidationContainer'>");

        /*Header banner*/
        HeaderOptions headerOptions = new HeaderOptions("");
        headerOptions.SaveButton.Name = "btnAdrUpdate";
        headerOptions.SaveButton.OnClick = "function(s, e){ValidateForm(s,e," + settings.Name + ");}";
        headerOptions.CancelButton.Name = "btnAdrCancel";
        headerOptions.CancelButton.OnClick = "function(s, e){ " + settings.Name + ".CancelEdit(); }";
        headerOptions.ViewType = eViewType.PopUp;
        HtmlGenerator.CreateViewHeader(Html, ViewData, headerOptions, true);
        /*End of header banner*/

        ViewContext.Writer.Write("<table class='headerTable AdressGrid'><tr><td>");

        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label";
            edtSettings.Text = Resources.ThirdPartNum;
            edtSettings.AssociatedControlName = "ThirdPartNum";

        }).Render();

        Html.DevExpress().TextBox(edtSettings =>
        {
            edtSettings.Name = "ThirdPartNum";
            edtSettings.ControlStyle.CssClass = "editor";
        }).Bind(DataBinder.Eval(item, "ThirdPartNum")).Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label required_field";
            edtSettings.Text = Resources.Street + ":";
            edtSettings.AssociatedControlName = "Street";
        }).Render();

        Html.DevExpress().TextBox(edtSettings =>
        {
            edtSettings.Name = "Street";
            edtSettings.ControlStyle.CssClass = "editor";
            edtSettings.ShowModelErrors = true;
            edtSettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            edtSettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS;
        }).Bind(DataBinder.Eval(item, "Street")).Render();
        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label";
            edtSettings.Text = Resources.POBox;
            edtSettings.AssociatedControlName = "POBox";

        }).Render();

        Html.DevExpress().TextBox(edtSettings =>
        {
            edtSettings.Name = "POBox";
            edtSettings.ControlStyle.CssClass = "editor";
        }).Bind(DataBinder.Eval(item, "POBox")).Render();

        ViewContext.Writer.Write("</td></tr><tr><td>");
        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label";
            edtSettings.Text = Resources.PostCode;
            edtSettings.AssociatedControlName = "PostCode";
        }).Render();

        Html.DevExpress().TextBox(txtSettings =>
        {
            txtSettings.Name = "PostCode";
            txtSettings.ControlStyle.CssClass = "editor";
        }).Bind(DataBinder.Eval(item, "PostCode")).Render();

        ViewContext.Writer.Write("</td><td>");
        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label";
            edtSettings.Text = Resources.City;
            edtSettings.AssociatedControlName = "City";
        }).Render();

        Html.DevExpress().TextBox(edtSettings =>
        {
            edtSettings.Name = "City";
            edtSettings.ControlStyle.CssClass = "editor";
        }).Bind(DataBinder.Eval(item, "City")).Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label";
            edtSettings.Text = Resources.AddressType;
            edtSettings.AssociatedControlName = "AddressType";
        }).Render();

        Html.DevExpress().ComboBox(edtSettings =>
        {
            edtSettings.Name = "AddressTypeCb";
            edtSettings.ControlStyle.CssClass = "editor";
            edtSettings.Properties.TextField = "Description";
            edtSettings.Properties.ValueField = "Oid";
            edtSettings.Properties.ValueType = typeof(Guid);
        }).BindList(ViewBag.AddressTypeComboBox).Bind(DataBinder.Eval(item, "AddressType!Key")).Render();

        ViewContext.Writer.Write("</td></tr><tr><td>");

        //Html.DevExpress().Label(edtSettings =>
        //{
        //    edtSettings.ControlStyle.CssClass = "label";
        //    edtSettings.Text = Resources.DefaultPhone;
        //    edtSettings.AssociatedControlName = "DefaultPhoneCb";

        //}).Render();
        Guid g = DataBinder.Eval(item, "DefaultPhone!Key") == null ? Guid.Empty : (Guid)DataBinder.Eval(item, "DefaultPhone!Key");
        Html.RenderPartial("UpdatePhoneComboBox", g);



        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label";
            edtSettings.Text = Resources.VatLevel;
            edtSettings.AssociatedControlName = "VatLevel";
        }).Render();

        Html.DevExpress().ComboBox(edtSettings =>
        {
            edtSettings.Name = "VatLevelCb";
            edtSettings.ControlStyle.CssClass = "editor";
            edtSettings.Properties.TextField = "Description";
            edtSettings.Properties.ValueField = "Oid";
            edtSettings.Properties.ValueType = typeof(Guid);
        }).BindList(ViewBag.VatLevels).Bind(DataBinder.Eval(item, "VatLevel!Key")).Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().TextBox(edtSettings =>
        {
            edtSettings.Properties.Caption = Resources.AddressProfession;
            edtSettings.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
            edtSettings.Properties.CaptionStyle.CssClass = "label";
            edtSettings.Name = "Profession";
            edtSettings.ControlStyle.CssClass = "editor";
            edtSettings.ShowModelErrors = true;
            edtSettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            edtSettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS;
            //edtSettings.Width = Unit.Percentage(100);
        }).Bind(DataBinder.Eval(item, "Profession")).Render();
        
        ViewContext.Writer.Write("</td></tr></table>");
        

        ViewContext.Writer.Write("<div id='PhoneGrid'>");
        Html.RenderAction("ParameterGrid", "Phone", new { strAddressID = DataBinder.Eval(item, "Oid"), displayCommands = true });
        ViewContext.Writer.Write("</div>");
        
        ViewContext.Writer.Write(Html.Hidden("TraderID", ViewData["Trader_ID"]));
        ViewContext.Writer.Write(Html.Hidden("adrSupplierID", ViewData["Supplier_ID"]));

        ViewContext.Writer.Write(Html.Hidden("centralStoreBlock", ViewData["centralStoreBlock"]));

        ViewContext.Writer.Write("</div>");
    });
}).Bind(Model).GetHtml()
