@using ITS.Retail.ResourcesLib;
@using ITS.Retail.Model;
@Html.DevExpress().GridView(settings =>
{
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
	settings.AccessibilityCompliant = true;
    string gridName = "";
	if (ViewData["EditMode"] != null && bool.Parse(ViewData["EditMode"].ToString()) == true)
	{
		settings.Name = "grdPOSKeyMappings";
		settings.Columns.Add(column =>
		{
			column.Caption = "#";
			column.SetDataItemTemplateContent(c =>
			{
                ViewContext.Writer.Write("<a href='javascript:;' onclick=\"" + settings.Name + ".SetFocusedRowIndex('" + c.ItemIndex.ToString() + "');" + settings.Name + ".DeleteRow('" + c.ItemIndex.ToString() + "');\" title=\"" + Resources.Delete + "\"><img src='" + Url.Content("~/Content/img/del.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Delete + "\" /></a>");
			});
			column.Settings.AllowDragDrop = DefaultBoolean.False;
			column.Settings.AllowSort = DefaultBoolean.False;
			column.Width = 50;
		});
		settings.CallbackRouteValues = new { Controller = "POSKeysLayout", Action = "POSKeyMappingGrid", editMode = true };
		settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "POSKeysLayout", Action = "POSKeyMappingDelete" };
        gridName = "grdPOSKeyMappingEdit";
	}
	else
	{
		settings.Name = "grdPOSKeyMappings_" + ViewData["POSKeysLayoutGuid"];
		settings.CallbackRouteValues = new { Controller = "POSKeysLayout", Action = "POSKeyMappingGrid", POSKeysLayoutGuid = ViewData["POSKeysLayoutGuid"], editMode = false };
        gridName = "grdPOSKeyMappingView";
	}

	settings.Columns.Add(col =>
	{
		col.FieldName = "KeyData";
		col.Caption = Resources.Keys;
		col.HeaderStyle.Wrap = DefaultBoolean.True;
		col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
	});

	settings.Columns.Add(column =>
	{
		column.FieldName = "KeyData";
		column.Caption = Resources.KeyData;
		column.HeaderStyle.Wrap = DefaultBoolean.True;
		column.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
		column.SetDataItemTemplateContent(c =>
		{
			ViewContext.Writer.Write(((int)DataBinder.Eval(c.DataItem, "KeyData")).ToString());
		});
	});

	settings.Columns.Add(col =>
	{
		col.FieldName = "NotificationType";
		col.Caption = Resources.NotificationType;
		col.HeaderStyle.Wrap = DefaultBoolean.True;
		col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.SetDataItemTemplateContent(c =>
        {
            ViewContext.Writer.Write(((eNotificationsTypes)DataBinder.Eval(c.DataItem, "NotificationType")).ToLocalizedString());
        });
	});

	settings.Columns.Add(col =>
	{
		col.FieldName = "ActionCode";
		col.Caption = Resources.ActionCode;
		col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.SetDataItemTemplateContent(c =>
        {
            ViewContext.Writer.Write(((eActions)DataBinder.Eval(c.DataItem, "ActionCode")).ToLocalizedString());
        });
	});

    settings.Columns.Add(col =>
    {
        col.FieldName = "ActionParameters";
        col.Caption = "Action Parameters";
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });

	settings.Columns.Add(col =>
	{
		col.FieldName = "RedirectTo";
		col.Caption = Resources.RedirectTo;
		col.HeaderStyle.Wrap = DefaultBoolean.True;
		col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
	});

	settings.Columns.Add(col =>
	{
		col.FieldName = "RedirectTo";
		col.Caption = Resources.RedirectTo + " - " +Resources.KeyData;
		col.HeaderStyle.Wrap = DefaultBoolean.True;
		col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
		col.SetDataItemTemplateContent(c =>
		{
			ViewContext.Writer.Write(((int)DataBinder.Eval(c.DataItem, "RedirectTo")).ToString());
		});
	});

	settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.NextColumn;
	settings.SettingsBehavior.EnableRowHotTrack = true;
	settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
	settings.Settings.ShowFilterRow = true;
	settings.Settings.ShowFilterRowMenu = true;
	settings.Settings.ShowFilterBar = GridViewStatusBarMode.Auto;
	settings.Settings.ShowFooter = true;
	settings.Settings.ShowHeaderFilterButton = true;
	settings.KeyFieldName = "Oid";
	settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
	settings.SettingsPopup.EditForm.Height = System.Web.UI.WebControls.Unit.Percentage(80);
	settings.SettingsPopup.EditForm.Width = System.Web.UI.WebControls.Unit.Percentage(40);
	settings.SettingsPopup.EditForm.Modal = true;
	settings.SettingsPopup.EditForm.ShowHeader = true;
	settings.StylesPopup.EditForm.Header.Font.Bold = true;
	settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;
	settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
	settings.SettingsText.PopupEditFormCaption = Resources.DeviceInfo;
	settings.SettingsBehavior.ConfirmDelete = true;
	settings.KeyboardSupport = false;
	settings.SettingsPager.PageSize = 10;
	settings.SettingsCookies.Enabled = false;
	settings.SettingsCookies.StoreColumnsVisiblePosition = true;
	settings.SettingsCookies.StoreColumnsWidth = true;
	settings.SettingsCookies.StoreFiltering = false;
	settings.SettingsCookies.StorePaging = true;
	settings.Settings.ShowTitlePanel = true;
	settings.SettingsText.Title = Resources.KeyMappings;
    settings.SettingsText.PopupEditFormCaption = Resources.POSKeyMapping;
    settings.Settings.GridLines = System.Web.UI.WebControls.GridLines.Vertical;
    settings.Styles.Header.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

    settings.SettingsPager.EnableAdaptivity = true;
    settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.TopAndBottom;

    settings.ClientLayout += (sndr, evt) =>
    {
        User user = (User)ViewBag.CurrentUser;
        if (user != null)
        {
            if (evt.LayoutMode == ClientLayoutMode.Loading)
            {
                GridSettings sets = user.GridSettings.FirstOrDefault(x => x.GridName == gridName);
                if (sets != null)
                {
                    evt.LayoutData = sets.GridLayout;
                }
            }
            else
            {
                BaseController.UpdateUserGridSettings(user.Oid, gridName, evt.LayoutData);
            }
        }
    };
    
	settings.SetEditFormTemplateContent(editContent =>
	{
		var item = @ViewBag.CurrentItem != null ? @ViewBag.CurrentItem : editContent.DataItem;
	});

	settings.PreRender = (sender, e) =>
	{
		((MVCxGridView)sender).FocusedRowIndex = 0;
	};

}).Bind(Model).GetHtml()
