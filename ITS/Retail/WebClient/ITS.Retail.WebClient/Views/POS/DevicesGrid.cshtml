@model DevExpress.Xpo.XPCollection<TerminalDeviceAssociation>

@using ITS.Retail.ResourcesLib;
@using ITS.Retail.Model;
@Html.DevExpress().GridView(settings =>
{
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
    settings.AccessibilityCompliant = true;
    string gridName = "";
    if (ViewData["EditMode"] != null && bool.Parse(ViewData["EditMode"].ToString()) == true)
    {
        settings.Name = "grdDevices";
        settings.Columns.Add(column =>
        {
            column.Caption = "#";
            column.SetDataItemTemplateContent(c =>
            {
                ViewContext.Writer.Write(
                    "<a href='javascript:;' onclick=\"" + settings.Name + ".SetFocusedRowIndex('" + c.ItemIndex.ToString() + "');" + settings.Name + ".StartEditRow('" + c.ItemIndex.ToString() + "');\" title=\"" + Resources.Edit + "\"><img src='" + Url.Content("~/Content/img/edit.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Edit + "\" /></a>" +
                    "<a href='javascript:;' onclick=\"" + settings.Name + ".SetFocusedRowIndex('" + c.ItemIndex.ToString() + "');" + settings.Name + ".DeleteRow('" + c.ItemIndex.ToString() + "');\" title=\"" + Resources.Delete + "\"><img src='" + Url.Content("~/Content/img/del.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Delete + "\" /></a>"
                );
            });
            column.SetHeaderTemplateContent(c =>
            {
                ViewContext.Writer.Write(
                    "<a href='javascript:;' onclick=\"" + settings.Name + ".AddNewRow();\"><img src='" + Url.Content("~/Content/img/plus.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Add + "\" /></a>"
                );
            });

            column.Settings.AllowDragDrop = DefaultBoolean.False;
            column.Settings.AllowSort = DefaultBoolean.False;
            column.Width = 90;
        });
        settings.CallbackRouteValues = new { Controller = "POS", Action = "DeviceGrid", editMode = true };
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "POS", Action = "InsertDevice" };
		settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "POS", Action = "UpdateDevice" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "POS", Action = "DeleteDevice" };
        gridName = "grdDeviceEdit";
    }
    else
    {
        settings.Name = "grdDevices_" + ViewData["POSGuid"];
		settings.CallbackRouteValues = new { Controller = "POS", Action = "DeviceGrid", POSGuid = ViewData["POSGuid"], editMode = false };
        gridName = "grdDeviceView";
    }

	settings.Columns.Add(col =>
	{
		col.FieldName = "TerminalDevice.Name";
		col.Caption = Resources.Name;
		col.HeaderStyle.Wrap = DefaultBoolean.True;
		col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
	});
	
	settings.Columns.Add(col =>
	{
		col.FieldName = "TerminalDevice.ConnectionType";
		col.Caption = Resources.ConnectionType;
		col.HeaderStyle.Wrap = DefaultBoolean.True;
		col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
	});

	settings.Columns.Add(col =>
	{
		col.Caption = Resources.DeviceType;
		col.HeaderStyle.Wrap = DefaultBoolean.True;
		col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
		col.SetDataItemTemplateContent(c =>
		{
			var currentItem = DataBinder.Eval(c.DataItem, "this");
			if ((currentItem as TerminalDeviceAssociation) != null &&
				((currentItem as TerminalDeviceAssociation).TerminalDevice as POSDevice) != null &&
				((currentItem as TerminalDeviceAssociation).TerminalDevice as POSDevice).DeviceSettings != null)
			{
				ViewContext.Writer.Write(((currentItem as TerminalDeviceAssociation).TerminalDevice as POSDevice).DeviceSettings.DeviceType.ToString());
			}
		});
	});
	
	settings.Columns.Add(col =>
	{
		col.FieldName = "IsPrimary";
		col.Caption = Resources.IsPrimary;
		col.HeaderStyle.Wrap = DefaultBoolean.True;
		col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
	});

    settings.Columns.Add(col =>
    {
        col.FieldName = "Priority";
        col.Caption = Resources.Priority;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
    });
	
	
	settings.Columns.Add(col =>
	{
		col.Caption = Resources.DeviceSpecificType;
		col.HeaderStyle.Wrap = DefaultBoolean.True;
		col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
		col.SetDataItemTemplateContent(c =>
			{
				var currentItem = DataBinder.Eval(c.DataItem, "this");
				if ((currentItem as TerminalDeviceAssociation) != null && ((currentItem as TerminalDeviceAssociation).TerminalDevice as POSDevice) != null)
				{
					ViewContext.Writer.Write(((currentItem as TerminalDeviceAssociation).TerminalDevice as POSDevice).DeviceSpecificType.ToString());
				}
			});
	});


    
    settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.NextColumn;
    settings.SettingsBehavior.EnableRowHotTrack = true;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Settings.ShowFilterRow = true;
    settings.Settings.ShowFilterRowMenu = true; 
    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Auto; 
    settings.Settings.ShowFooter = true;
    settings.Settings.ShowHeaderFilterButton = true;
    settings.KeyFieldName = "Oid";
    settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
    settings.SettingsPopup.EditForm.Height = System.Web.UI.WebControls.Unit.Percentage(80);
    settings.SettingsPopup.EditForm.Width = System.Web.UI.WebControls.Unit.Percentage(40);
    settings.SettingsPopup.EditForm.Modal = true;
    settings.SettingsPopup.EditForm.ShowHeader = true;
    settings.StylesPopup.EditForm.Header.Font.Bold = true;
    settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;
    settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;
	settings.SettingsText.PopupEditFormCaption = Resources.DeviceInfo;
    settings.SettingsBehavior.ConfirmDelete = true;

    settings.KeyboardSupport = false;
    settings.SettingsPager.PageSize = 5;
    settings.SettingsCookies.Enabled = false;
    
    settings.SettingsCookies.StoreColumnsVisiblePosition = true;
    settings.SettingsCookies.StoreColumnsWidth = true;
    settings.SettingsCookies.StoreFiltering = false;
    settings.SettingsCookies.StorePaging = true;
    settings.Settings.ShowTitlePanel = true;
	settings.SettingsText.Title = Resources.Devices;
    settings.Settings.GridLines = System.Web.UI.WebControls.GridLines.Vertical;
    settings.Styles.Header.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

    settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.TopAndBottom;
    settings.SettingsText.PopupEditFormCaption = Resources.DeviceInfo;

    settings.ClientLayout += (sndr, evt) =>
    {
        User user = (User)ViewBag.CurrentUser;
        if (user != null)
        {
            if (evt.LayoutMode == ClientLayoutMode.Loading)
            {
                GridSettings sets = user.GridSettings.FirstOrDefault(x => x.GridName == gridName);
                if (sets != null)
                {
                    evt.LayoutData = sets.GridLayout;
                }
            }
            else
            {
                BaseController.UpdateUserGridSettings(user.Oid, gridName, evt.LayoutData);
            }
        }
    };
    
    settings.SetEditFormTemplateContent(editContent =>
    {
        var item = @ViewBag.CurrentItem != null ? @ViewBag.CurrentItem : editContent.DataItem;

        ViewContext.Writer.Write("<div class='ValidationContainer'>");
        /*Header banner*/
        HeaderOptions headerOptions = new HeaderOptions("");
        headerOptions.SaveButton.Name = "btnDeviceUpdate";
        headerOptions.SaveButton.OnClick = "function(s, e){ValidateForm(s,e," + settings.Name + ");}";
        headerOptions.CancelButton.Name = "btnDeviceCancel";
        headerOptions.CancelButton.OnClick = "function(s, e){ " + settings.Name + ".CancelEdit(); }";
        headerOptions.ViewType = eViewType.PopUp;
        HtmlGenerator.CreateViewHeader(Html, ViewData, headerOptions, true);
        /*End of header banner*/

        ViewContext.Writer.Write("<table><tr><td>");

        Html.DevExpress().ComboBox(edtSettings =>
        {
            edtSettings.Properties.Caption = Resources.Device + ":";
            edtSettings.Properties.CaptionStyle.CssClass = "label";
            edtSettings.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
	        edtSettings.Name = "Device";
	        edtSettings.Properties.TextField = "Name";
	        edtSettings.Properties.ValueField = "Oid";
	        edtSettings.Properties.ValueType = typeof(Guid);
            edtSettings.ShowModelErrors = true;
            edtSettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            edtSettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS;
        }).BindList(ViewBag.Devices).Bind(item == null ? null : DataBinder.Eval(item, "TerminalDevice!Key")).Render();

		ViewContext.Writer.Write("</td><td>");

		Html.DevExpress().CheckBox(edtSettings =>
		{
            edtSettings.Text = Resources.IsPrimary;
			edtSettings.Name = "IsPrimary";
			edtSettings.Properties.ValueChecked = true;
			edtSettings.Properties.ValueGrayed = false;
			edtSettings.Properties.ValueUnchecked = false;
			edtSettings.Properties.ValueType = typeof(bool);
            edtSettings.ControlStyle.CssClass = "padding-top-25";
		}).Bind(DataBinder.Eval(item, "IsPrimary") ?? false).Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().SpinEdit(edtSettings =>
        {
            edtSettings.Properties.Caption = Resources.Priority;
            edtSettings.Properties.CaptionStyle.CssClass = "label";
            edtSettings.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
            edtSettings.Name = "Priority";
            edtSettings.Properties.NumberType = SpinEditNumberType.Integer;
            edtSettings.Properties.MinValue = 0;
        }).Bind(DataBinder.Eval(item, "Priority")??1).Render();
		
        ViewContext.Writer.Write("</td></tr></table>");
        ViewContext.Writer.Write("</div>");

    });

    settings.PreRender = (sender, e) =>
    {
        ((MVCxGridView)sender).FocusedRowIndex = 0;
    };

}).Bind(Model).GetHtml()
