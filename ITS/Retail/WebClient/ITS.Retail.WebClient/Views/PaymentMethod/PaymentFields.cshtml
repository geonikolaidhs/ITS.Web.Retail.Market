@using ITS.Retail.ResourcesLib;
@Html.DevExpress().GridView(settings =>
{
    settings.Name = "grdPaymentFields";
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
    settings.AccessibilityCompliant = true;
    settings.SettingsBehavior.EnableCustomizationWindow = true;
    settings.ClientSideEvents.ContextMenu = "CustomizationWindowBtn_Click";
    settings.HtmlRowPrepared = (object sender, ASPxGridViewTableRowEventArgs e) =>
    {
        if (e.RowType == GridViewRowType.Data)
            e.Row.Attributes.Remove("oncontextmenu");
    };
    settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.NextColumn;
    settings.SettingsBehavior.EnableRowHotTrack = true;
    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.Settings.ShowFilterRow = true;
    settings.Settings.ShowFilterRowMenu = true;
    settings.Settings.ShowFilterBar = GridViewStatusBarMode.Auto;
    settings.Settings.ShowFooter = true;
    settings.Settings.ShowGroupPanel = true;
    settings.Settings.ShowHeaderFilterButton = true;
    settings.KeyFieldName = "Oid";
    settings.CallbackRouteValues = new { Controller = "PaymentMethod", Action = "PaymentFields" };
    settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;

    settings.SettingsPopup.EditForm.Modal = true;
    settings.SettingsEditing.ShowModelErrorsForEditors = false;
    settings.SettingsPopup.EditForm.VerticalAlign = PopupVerticalAlign.WindowCenter;
    settings.SettingsPopup.EditForm.HorizontalAlign = PopupHorizontalAlign.WindowCenter;

    settings.SettingsPager.EnableAdaptivity = true;
    settings.SettingsPager.Position = System.Web.UI.WebControls.PagerPosition.TopAndBottom;
    if ((bool)ViewData["TableCanInsert"])
    {
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "PaymentMethod", Action = "InsertPaymentField" };
    }
    if ((bool)ViewData["TableCanUpdate"])
    {
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "PaymentMethod", Action = "UpdatePaymentField" };
    }
    if ((bool)ViewData["TableCanDelete"])
    {
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "PaymentMethod", Action = "DeletePaymentField" };
    }


    settings.Columns.Add(column =>
    {
        column.Caption = "#";
        column.SetDataItemTemplateContent(c =>
        {
            if ((bool)ViewData["TableCanUpdate"])
            {
                ViewContext.Writer.Write("<a href='javascript:;' onclick=\"" + settings.Name + ".SetFocusedRowIndex('" + c.ItemIndex.ToString() + "');" + settings.Name + ".StartEditRow('" + c.ItemIndex.ToString() + "');\" title=\"" + Resources.Edit + "\"><img src='" + Url.Content("~/Content/img/edit.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Edit + "\" /></a>");
            }
            if ((bool)ViewData["TableCanDelete"])
            {
                ViewContext.Writer.Write("<a href=javascript:;' onclick=\"" + settings.Name + ".SetFocusedRowIndex('" + c.ItemIndex.ToString() + "');" + settings.Name + ".DeleteRow('" + c.ItemIndex.ToString() + "');\" title=\"" + Resources.Delete + "\"><img src='" + Url.Content("~/Content/img/del.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Delete + "\" /></a>");
            }

        });
        column.SetHeaderTemplateContent(c =>
        {
            if ((bool)ViewData["TableCanInsert"])
            {
                ViewContext.Writer.Write("<a href='javascript:;' onclick=\"" + settings.Name + ".AddNewRow();\"><img src='" + Url.Content("~/Content/img/plus.png?ver=" + ViewData["ApplicationVersionNumber"]) + "' alt=\"" + Resources.Add + "\" /></a>");
            }
        });

        column.Settings.AllowDragDrop = DefaultBoolean.False;
        column.Settings.AllowSort = DefaultBoolean.False;
        column.Width = 70;
    });

    settings.SettingsBehavior.ConfirmDelete = true;
    settings.CommandColumn.Width = 60;
    settings.CommandColumn.Visible = false;
    settings.CommandColumn.ShowSelectCheckbox = false;
    settings.CommandColumn.ShowNewButton= false;
    settings.CommandColumn.ShowUpdateButton= false;
    settings.CommandColumn.ShowDeleteButton = false;
    settings.CommandColumn.ShowEditButton = false;
    settings.CommandColumn.ShowClearFilterButton = true;
    settings.KeyboardSupport = false;
    settings.SettingsPager.PageSize = 30;
    settings.SettingsCookies.Enabled = false;
    settings.SettingsCookies.StoreColumnsVisiblePosition = true;
    settings.SettingsCookies.StoreColumnsWidth = true;
    settings.SettingsCookies.StoreFiltering = false;
    settings.SettingsCookies.StorePaging = true;
    settings.Settings.ShowTitlePanel = true;
    settings.SettingsText.Title = Resources.PaymentFields;
    settings.Settings.GridLines = System.Web.UI.WebControls.GridLines.Vertical;
    settings.Styles.Header.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Center;

    settings.ClientLayout += (sndr, evt) =>
    {
        User user = (User)ViewBag.CurrentUser;
        if (user != null)
        {
            if (evt.LayoutMode == ClientLayoutMode.Loading)
            {
                GridSettings sets = user.GridSettings.FirstOrDefault(x => x.GridName == settings.Name);
                if (sets != null)
                {
                    evt.LayoutData = sets.GridLayout;
                }
            }
            else
            {
                BaseController.UpdateUserGridSettings(user.Oid, settings.Name, evt.LayoutData);
            }
        }
    };

    settings.Columns.Add(col =>
    {
        col.FieldName = "FieldName";
        col.Caption = Resources.Field;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });

    settings.Columns.Add(col =>
    {
        col.FieldName = "Label";
        col.Caption = Resources.Label;
        col.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        col.HeaderStyle.Wrap = DefaultBoolean.True;
    });

    settings.SettingsText.PopupEditFormCaption = Resources.PaymentField;
    settings.SetEditFormTemplateContent(editContent =>
    {

        var item = @ViewBag.CurrentItem != null ? @ViewBag.CurrentItem : editContent.DataItem;

        ViewContext.Writer.Write("<div class='ValidationContainer'>");
        /*Header banner*/
        HeaderOptions headerOptions = new HeaderOptions("");
        headerOptions.SaveButton.Name = "btnPaymentFieldUpdate";
        headerOptions.SaveButton.OnClick = "function(s, e){ValidateForm(s,e," + settings.Name + ");}";
        headerOptions.CancelButton.Name = "btnPaymentFieldCancel";
        headerOptions.CancelButton.OnClick = "function(s, e){ " + settings.Name + ".CancelEdit(); }";
        headerOptions.ViewType = eViewType.PopUp;
        HtmlGenerator.CreateViewHeader(Html, ViewData, headerOptions, true);
        /*End of header banner*/

        ViewContext.Writer.Write("<table><tr><td>");

        Html.DevExpress().Label(
            edtSettings =>
            {
                edtSettings.ControlStyle.CssClass = "label required_field";
                edtSettings.Text = Resources.Field + ":";
            }
            ).Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().ComboBox(
            combosettings =>
            {
                combosettings.Name = "FieldName";
                combosettings.ControlStyle.CssClass = "size";
                combosettings.Properties.ValueType = typeof(String);
                combosettings.ShowModelErrors = true;
                combosettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
                combosettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS; 
                combosettings.Properties.ClientSideEvents.SelectedIndexChanged = "FieldNameComboBox_OnSelectedIndexChanged";
            }
        ).BindList(ViewBag.PaymentFields).Bind(DataBinder.Eval(item, "FieldName")).Render();

        ViewContext.Writer.Write("</td><tr><td>");

        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label required_field";
            edtSettings.Text = Resources.Label + ":";
        }).Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().TextBox(
            edtSettings =>
            {
                edtSettings.Name = "Label";
                edtSettings.ControlStyle.CssClass = "editor";
                edtSettings.ShowModelErrors = true;
                edtSettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
                edtSettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS;
            }
        ).Bind(DataBinder.Eval(item, "Label")).Render();

        ViewContext.Writer.Write("</td><tr><td>");

        bool customEnumInitialVisibility = DataBinder.Eval(item, "CustomEnumeration!Key") != null;
        
        Html.DevExpress().Label(edtSettings =>
        {
            edtSettings.ControlStyle.CssClass = "label required_field";
            edtSettings.Text = Resources.CustomEnumeration + ":";
            edtSettings.Name = "CustomEnumerationLabel";
            edtSettings.Properties.EnableClientSideAPI = true;
            edtSettings.ClientVisible = customEnumInitialVisibility;
        }).Render();

        ViewContext.Writer.Write("</td><td>");

        Html.DevExpress().ComboBox(edtSettings =>
        {
            edtSettings.Name = "CustomEnumerationComboBox";
            edtSettings.Properties.TextField = "Description";
            edtSettings.Properties.ValueField = "Oid";
            edtSettings.Properties.ValueType = typeof(Guid);
            edtSettings.ShowModelErrors = true;
            edtSettings.Properties.ValidationSettings.RequiredField.IsRequired = true;
            edtSettings.Properties.ValidationSettings.RequiredField.ErrorText = Resources.PLEASE_FILL_ALL_REQUIRED_FIELDS;
            edtSettings.ClientEnabled = customEnumInitialVisibility;
            edtSettings.ClientVisible = customEnumInitialVisibility;
        }).BindList(ViewBag.CustomEnumerationDefinitions).Bind(DataBinder.Eval(item, "CustomEnumeration!Key")).Render();

        ViewContext.Writer.Write("</td></tr></table>");
        ViewContext.Writer.Write("</div>");
    });

}).Bind(Model).GetHtml()
