//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
// 
#pragma warning disable 1591

namespace ITS.Licensing.ClientLibrary.LicenseWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LicenceWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class LicenceWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckOnlineStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckValidLicenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateLicenseOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LicenceWebService() {
            this.Url = global::ITS.Licensing.ClientLibrary.Properties.Settings.Default.ITS_License_ClientLibrary_LicenseWebService_LicenceWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckOnlineStatusCompletedEventHandler CheckOnlineStatusCompleted;
        
        /// <remarks/>
        public event CheckValidLicenceCompletedEventHandler CheckValidLicenceCompleted;
        
        /// <remarks/>
        public event ActivateLicenseCompletedEventHandler ActivateLicenseCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckOnlineStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckOnlineStatus() {
            object[] results = this.Invoke("CheckOnlineStatus", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckOnlineStatusAsync() {
            this.CheckOnlineStatusAsync(null);
        }
        
        /// <remarks/>
        public void CheckOnlineStatusAsync(object userState) {
            if ((this.CheckOnlineStatusOperationCompleted == null)) {
                this.CheckOnlineStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOnlineStatusOperationCompleted);
            }
            this.InvokeAsync("CheckOnlineStatus", new object[0], this.CheckOnlineStatusOperationCompleted, userState);
        }
        
        private void OnCheckOnlineStatusOperationCompleted(object arg) {
            if ((this.CheckOnlineStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOnlineStatusCompleted(this, new CheckOnlineStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckValidLicence", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ValidationStatus CheckValidLicence(System.Guid ApplicationID, string serialNumber, string MachineID, string activationKey, System.DateTime ApplicationBuild, System.DateTime beginDate, System.DateTime endDate) {
            object[] results = this.Invoke("CheckValidLicence", new object[] {
                        ApplicationID,
                        serialNumber,
                        MachineID,
                        activationKey,
                        ApplicationBuild,
                        beginDate,
                        endDate});
            return ((ValidationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void CheckValidLicenceAsync(System.Guid ApplicationID, string serialNumber, string MachineID, string activationKey, System.DateTime ApplicationBuild, System.DateTime beginDate, System.DateTime endDate) {
            this.CheckValidLicenceAsync(ApplicationID, serialNumber, MachineID, activationKey, ApplicationBuild, beginDate, endDate, null);
        }
        
        /// <remarks/>
        public void CheckValidLicenceAsync(System.Guid ApplicationID, string serialNumber, string MachineID, string activationKey, System.DateTime ApplicationBuild, System.DateTime beginDate, System.DateTime endDate, object userState) {
            if ((this.CheckValidLicenceOperationCompleted == null)) {
                this.CheckValidLicenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckValidLicenceOperationCompleted);
            }
            this.InvokeAsync("CheckValidLicence", new object[] {
                        ApplicationID,
                        serialNumber,
                        MachineID,
                        activationKey,
                        ApplicationBuild,
                        beginDate,
                        endDate}, this.CheckValidLicenceOperationCompleted, userState);
        }
        
        private void OnCheckValidLicenceOperationCompleted(object arg) {
            if ((this.CheckValidLicenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckValidLicenceCompleted(this, new CheckValidLicenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivateLicense", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ValidationStatus ActivateLicense(System.Guid ApplicationID, string serialNumber, string MachineID, System.DateTime ApplicationBuild, out System.DateTime beginDate, out System.DateTime endDate, out string ActivationKey) {
            object[] results = this.Invoke("ActivateLicense", new object[] {
                        ApplicationID,
                        serialNumber,
                        MachineID,
                        ApplicationBuild});
            beginDate = ((System.DateTime)(results[1]));
            endDate = ((System.DateTime)(results[2]));
            ActivationKey = ((string)(results[3]));
            return ((ValidationStatus)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateLicenseAsync(System.Guid ApplicationID, string serialNumber, string MachineID, System.DateTime ApplicationBuild) {
            this.ActivateLicenseAsync(ApplicationID, serialNumber, MachineID, ApplicationBuild, null);
        }
        
        /// <remarks/>
        public void ActivateLicenseAsync(System.Guid ApplicationID, string serialNumber, string MachineID, System.DateTime ApplicationBuild, object userState) {
            if ((this.ActivateLicenseOperationCompleted == null)) {
                this.ActivateLicenseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateLicenseOperationCompleted);
            }
            this.InvokeAsync("ActivateLicense", new object[] {
                        ApplicationID,
                        serialNumber,
                        MachineID,
                        ApplicationBuild}, this.ActivateLicenseOperationCompleted, userState);
        }
        
        private void OnActivateLicenseOperationCompleted(object arg) {
            if ((this.ActivateLicenseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateLicenseCompleted(this, new ActivateLicenseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ValidationStatus {
        
        /// <remarks/>
        LICENSE_VALID,
        
        /// <remarks/>
        LICENSE_VERSION_INVALID,
        
        /// <remarks/>
        LICENSE_VALID_UPDATES_EXPIRED,
        
        /// <remarks/>
        LICENSE_INVALID,
        
        /// <remarks/>
        LICENSE_CHANGED,
        
        /// <remarks/>
        LICENSE_MAXIMUM_REACHED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckOnlineStatusCompletedEventHandler(object sender, CheckOnlineStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOnlineStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckOnlineStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckValidLicenceCompletedEventHandler(object sender, CheckValidLicenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckValidLicenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckValidLicenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ValidationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationStatus)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ActivateLicenseCompletedEventHandler(object sender, ActivateLicenseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateLicenseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateLicenseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ValidationStatus Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationStatus)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.DateTime beginDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime endDate {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string ActivationKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
}

#pragma warning restore 1591